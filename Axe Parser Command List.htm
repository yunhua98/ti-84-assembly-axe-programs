<!doctype html>
<html>
<head>
<meta charset='UTF-8'/>
<title>Axe Parser Command List</title>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"d7c5f3b69ca654c5234ee6615e678f95",petok:"4eca350afa1be68e4a372da91ea54df139a7ec76-1475434116-1800",zone:"eeems.ca",rocket:"0",apps:{"cdnjs":{"__h":"1","cdnjs":"FX,CS,JS"},"ga_key":{"ua":"UA-22946993-3","ga_bs":"2"}}}];!function(a,b){a=document.createElement("script"),b=document.getElementsByTagName("script")[0],a.async=!0,a.src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=0489c402f5/cloudflare.min.js",b.parentNode.insertBefore(a,b)}()}}catch(e){};
//]]>
</script>
<script type="text/javascript">
//<![CDATA[
window.__CF=window.__CF||{};window.__CF.AJS={"cdnjs":{"__h":"1","cdnjs":"FX,CS,JS"},"ga_key":{"ua":"UA-22946993-3","ga_bs":"2"}};
//]]>
</script><script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=dccf16c0cc/appsh.min.js"></script><script type="text/javascript">__CF.AJS.inith();</script><style type='text/css' media='all'>body{font-family:Verdana,Sans-serif;font-size:0.8em;padding:0.4cm 2cm;}#popup{position:fixed;width:50%;}#popup>span{display:none;float:right;background-color:white;padding:3px;border:3px outset #AAAAAA;}.popup{display:none;}header{width:100%;position:fixed;top:0px;left:0px;background-color:#EEEEEE;border:0px solid black;border-bottom-width:1px;font-variant:small-caps;padding:0.5em 0em;text-align:center;}header h1{font-size:2.75em;margin:0em;}header h2{font-size:2em;margin:0em;}header menu{margin:0px;padding:0px;overflow:hidden;}menu ul{list-style:none;margin:0;padding:0;}menu a{margin:0.1cm;background-color:#F4F4F4;border-radius:6px;color:#333333;display:inline-block;font-size:1.2em;font-weight:bold;padding:0.1em 1em;text-decoration:none;transition:color 200ms linear,background-color 300ms linear;-o-transition:color 200ms linear,background-color 300ms linear;-moz-transition:color 200ms linear,background-color 300ms linear;-ms-transition:color 200ms linear,background-color 300ms linear;-webkit-transition:color 200ms linear,background-color 300ms linear;}menu a:hover{background-color:#333333;color:#F4F4F4;}body>table{margin-bottom:1cm;background-color:transparent;}body>table td:first-child{width:24%;}table{border-width:0px;border-collapse:collapse;width:100%;}table caption{background-color:#AAAAAA;border:2px solid #AAAAAA;color:white;font-size:1.4em;font-weight:bold;margin:0;padding:2px 6px;text-align:center;}table tr th{background-color:#F2F2F2;border:1px solid #DDDDDD;padding:3px 8px;text-align:center;}table tr th:empty{background-color:#CACACA;border:1px solid #BBBBBB;}table tr:nth-child(even) td{background-color:#FAFAFA;}table tr td{border:1px solid #DDDDDD;padding:2px 6px;text-align:left;}table tr:nth-child(odd) td:empty{background-color:#CACACA;border:1px solid #BBBBBB;}table tr:nth-child(even) td:empty{background-color:#C6C6C6;border:1px solid #BBBBBB;}table tr.newCommand td:empty{background-color:rgba(11,74,8,0.2);border:1px solid #BBBBBB;}table tr.changedCommand td:empty{background-color:rgba(85,0,0,0.2);border:1px solid #BBBBBB;}table tr.oldCommand td:empty{background-color:rgba(24,24,24,0.2);border:1px solid #BBBBBB;}code{font-family:"Courier New",Consolas,Monospace;}table tr.newCommand td{background-color:rgba(34,222,24,0.2);border:1px solid #BBBBBB;}table tr.changedCommand td{background-color:rgba(255,0,0,0.2);border:1px solid #BBBBBB;}table tr.oldCommand td{background-color:rgba(72,72,72,0.2);border:1px solid #BBBBBB;}table tr td span.keyReplacement{color:#108000;display:inline-block;float:right;font-size:0.7em;font-style:italic;margin-top:5px;}table tr td span.keyReplacement:before{content:"Key: ";font-style:normal;}footer{position:fixed;bottom:0px;left:0px;width:100%;text-align:center;background-color:#DDDDDD;border:0px solid black;border-top-width:1px;}footer div{padding:7px 0px;}footer h5{margin:0px;margin-bottom:2px;text-align:center;font-style:italic;}.DATA,.FILE,.LBL,.NAME,.VAR{color:#0039BF;}.BIN,.CHAR,.DEC,.HEX,.INT,.STR,.TOKEN{color:#808080}.BMP,.BUF,.BYTE,.COND,.DX,.DY,.EXP,.FREQ,.H,.KEY,.MAX,.MODE,.N,.PIC,.PTR,.R,.SIZE,.STR1,.STR2,.TEMP,.TIME,.W,.WAVE,.X,.Y,.REG,.PORT{color:#ED0000}.CONST{color:#ED6F00}.CODE{color:#108000}.LOW,.MED,.HIGH{font-weight:bold}.LOW{color:#10BF00}.MED{color:#E8B200}.HIGH{color:#E85D00}.BOOL{color:#00C0C0}.DRAWMODE{font-style:italic;color:#808080}.i,.info{font-style:italic}.nowrap{white-space:nowrap}body.hide .all,body .prgmapp,body .prgm,body .app,body .fusion,.none{display:none;text-align:center;}body .all,body.prgm .prgmapp,body.app .prgmapp,body.prgm .prgm,body.app .app,body.fusion .fusion{display:table-cell;text-align:center;}.float{margin-bottom:6px;margin-top:6px;}</style>
<style type='text/css' media='print'>body{font-size:0.7em}header{position:static}table caption{background-color:white;color:black;}body table:last-of-type{display:none}table tr th:empty{border:1px solid #DDDDDD}table tr td:empty{border:1px solid #DDDDDD}table tr.newCommand td{border:1px solid #DDDDDD}table tr.changedCommand td{border:1px solid #DDDDDD}table tr.oldCommand td{border:1px solid #DDDDDD}menu{display:none}footer{position:static}footer div{display:none}</style>
<script type="text/javascript">
			function calculateTop(element) {
				while (element.offsetTop == undefined)
					element = element.parentNode;
				var total = 0;
				while (element != null) {
					total += element.offsetTop;
					element = element.offsetParent;
				}
				return total;
			}
			function calculateMiddle(element) {
				return (element.clientHeight == undefined ? 0 :
						element.clientHeight / 2) + calculateTop(element);
			}
			function calculateBottom(element) {
				return (element.clientHeight == undefined ? 0 :
						element.clientHeight) + calculateTop(element);
			}
			window.onload = /*@cc_on!@*/0 ? function() {
				var elems = document.getElementsByName('mode');
				for (var i = 0; i < elems.length; i++) {
					elems[i].onchange = function() {
						document.body.setAttribute('class', this.id);
					};
				}
			} : function() {
				var elems = document.getElementsByName('mode');
				for (var i = 0; i < elems.length; i++) {
					elems[i].onchange = function() {
						var scrollX = window.scrollX, scrollY = window.scrollY;
						var middle = scrollY + window.innerHeight / 4;
						var element = document.body, lastElement;
						do {
							lastElement = element;
							element = element.firstChild;
							while (element != null &&
									calculateBottom(element) < middle)
								element = element.nextSibling;
						} while (element != null && element.childNodes.length);
						if (element == null) element = lastElement;
						while (element.className) element = element.parentNode;
						var offset = calculateTop(element);
						document.body.setAttribute('class', this.id);
						window.scroll(scrollX, scrollY + calculateTop(element) - offset);
					};
					if (elems[i].checked)
						document.body.setAttribute('class', elems[i].id);
				}
				var index = document.getElementById('commandListIndex');
				var links = index.getElementsByTagName('a');
				var header = document.getElementsByTagName('header')[0];
				var footer = document.getElementsByTagName('footer')[0];
				var bodyPaddingTop = parseInt(window.getComputedStyle(document.
						body, null).paddingTop, 10);

				var indexHeight = index.clientHeight;
				window.onresize = function() {
					var original = index.style.height;
					index.style.height = 'auto';
					indexHeight = index.clientHeight;
					index.style.height = original;
				};
				var opening = false, interval = false;
				index.style.height = '0px';
				document.body.style.marginTop = header.clientHeight + 'px';
				document.body.style.marginBottom = footer.clientHeight + 'px';
				function animate() {
					var height = parseInt(index.style.height, 10);
					if (opening) {
						if (height < indexHeight - 20)
							index.style.height = height + 20 + 'px';
						else {
							index.style.height = indexHeight + 'px';
							clearInterval(interval);
							interval = false;
						}
					} else {
						if (height > 20)
							index.style.height = height - 20 + 'px';
						else {
							index.style.height = '0px';
							clearInterval(interval);
							interval = false;
						}
					}
					document.body.style.marginTop = header.clientHeight + 'px';
				}
				header.onmouseover = function() {
					opening = true;
					if (!interval)
						interval = setInterval(animate, 33);
				};
				header.onmouseout = function() {
					opening = false;
					if (!interval)
						interval = setInterval(animate, 33);
				};

				for (var i = 0; i < links.length; i++) {
					links[i].onclick = function() {
						window.onscroll = function() {
							window.onscroll = undefined;
							window.scrollBy(0, -header.clientHeight -
									bodyPaddingTop);
						};
						return true;
					};
				}

				var popups = document.getElementsByClassName('popup');
				var popupContainer = document.getElementById('popup');
				var popup = popupContainer.getElementsByTagName('span')[0];
				for (var i = 0; i < popups.length; i++) {
					popups[i].parentNode.onmouseover = function() {
						popup.innerHTML = this.getElementsByClassName('popup')[0].innerHTML;
						document.onmousemove = function(e) {
							popupContainer.style.left = e.clientX - popupContainer.clientWidth - 6 + 'px';
							popupContainer.style.top = e.clientY - 5 + 'px';
						};
						popup.style.display = 'inline';
					};
					popups[i].parentNode.onmouseout = function() {
						document.onmousemove = undefined;
						popup.style.display = 'none';
					};
				}
			};
		</script>
<script type="text/javascript">
/* <![CDATA[ */
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-22946993-3']);
_gaq.push(['_trackPageview']);

(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

(function(b){(function(a){"__CF"in b&&"DJS"in b.__CF?b.__CF.DJS.push(a):"addEventListener"in b?b.addEventListener("load",a,!1):b.attachEvent("onload",a)})(function(){"FB"in b&&"Event"in FB&&"subscribe"in FB.Event&&(FB.Event.subscribe("edge.create",function(a){_gaq.push(["_trackSocial","facebook","like",a])}),FB.Event.subscribe("edge.remove",function(a){_gaq.push(["_trackSocial","facebook","unlike",a])}),FB.Event.subscribe("message.send",function(a){_gaq.push(["_trackSocial","facebook","send",a])}));"twttr"in b&&"events"in twttr&&"bind"in twttr.events&&twttr.events.bind("tweet",function(a){if(a){var b;if(a.target&&a.target.nodeName=="IFRAME")a:{if(a=a.target.src){a=a.split("#")[0].match(/[^?=&]+=([^&]*)?/g);b=0;for(var c;c=a[b];++b)if(c.indexOf("url")===0){b=unescape(c.split("=")[1]);break a}}b=void 0}_gaq.push(["_trackSocial","twitter","tweet",b])}})})})(window);
/* ]]> */
</script>
</head>
<body class="hide">
<div id="popup"><span></span></div>
<header>
<div>
<h1>Axe Parser v1.2.2</h1>
<h2>Command List</h2>
</div>
<menu id=commandListIndex>
<br/>
<a href="#systemCommands">System</a>
<a href="#screenAndBufferCommands">Screen and Buffer</a>
<a href="#controlBlocksCommands">Control Blocks</a>
<a href="#labelsAndSubroutinesCommands">Labels and Subroutines</a>
<a href="#basicMathCommands">Basic Math</a>
<a href="#advancedMathCommands">Advanced Math</a>
<a href="#drawingCommands">Drawing</a>
<a href="#spritesCommands">Sprites</a>
<a href="#textCommands">Text</a>
<a href="#dataAndStorageCommands">Data and Storage</a>
<a href="#dataProcessingCommands">Data Processing</a>
<a href="#externalVariablesCommands">External Variables</a>
<a href="#interruptsCommands">Interrupts</a>
<a href="#linkPortCommands">Link Port</a>
</menu>
</header>
<table id=systemCommands class=commandTable>
<caption>System</caption>
<tr>
<th rowspan="2">Command</th>
<th rowspan="2">Description</th>
<th class="all" colspan="3">Size (bytes)</th>
<th class="all" rowspan="2">Speed<br/>(cycles)</th>
<td class="none" colspan="5"></td>
</tr>
<tr>
<th class="all">
<span class=info>Each Use</span>
<div class="popup"><span class=info>For commands that list special information given an argument is a constant or variable, treat the size of the argument as 0 bytes, unless otherwise stated.</span></div>
</th>
<th class="all" colspan="2">Once</th>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code>_</code></td>
<td>Spaces are ignored in most situations. They mainly just help for code organization and readability.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code>:</code></td>
<td>The colon separates 2 statements in the same expression. Enter ends the expression, closing all unclosed parenthesis.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code>.</code></td>
<td>The period is a single line comment. Whatever follows will be ignored until the next newline.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code>...</code></td>
<td>Start or end of a multi-line comment ignoring everything in between. Must be the first characters on the line.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code>...If <span class=CONST>CONST</span></code></td>
<td>A conditional comment. Only starts a multi-line comment if the constant is zero.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code>...!If <span class=CONST>CONST</span></code></td>
<td>A conditional comment. Only starts a multi-line comment if the constant is non-zero.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code>...Else</code></td>
<td>If the previous conditional was a comment, the next comment block will not be a comment and vise-versa.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code>DiagnosticOn</code></td>
<td>Turns on the run indicator (marching ants). Program will display "done" after finishing.</td>
<td class="all">7</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>~13000</span>
<div class="popup">
<table>
<tr>
<th>83+</th>
<th>84+SE</th>
</tr>
<tr>
<td class="all">~11000</td>
<td class="all">~15000</td>
</tr>
</table>
</div>
</td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code>DiagnosticOff</code></td>
<td>Turns off the run indicator. Program will not display "done" after finishing.</td>
<td class="all">7</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>~13000</span>
<div class="popup">
<table>
<tr>
<th>83+</th>
<th>84+SE</th>
</tr>
<tr>
<td class="all">~11000</td>
<td class="all">~15000</td>
</tr>
</table>
</div>
</td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code>Full</code></td>
<td>Full speed mode is activated if supported, making most code run 2.5 times faster on newer calculators. Returns 0 if not supported.</td>
<td class="all">8</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>38</span>
<div class="popup">30 cycles at original CPU speed,<br/>8 cycles at ~15MHz</div>
</td>
<td class="none" colspan="2"></td>
</tr>
<tr class=newCommand>
<td><code>Full<sup>r</sup></code></td>
<td>Suspends the memory delays on non-83+ calculators for the remainder of the program. This will not properly restore the original setting if <code>Return<sup>r</sup></code> is used. Do not execute in a loop!</td>
<td class="all">16</td>
<td class="all" colspan="2"></td>
<td class="all">~100</td>
<td class="none" colspan="2"></td>
</tr>
<tr class=newCommand>
<td><code>Full<sup>r</sup><sup>r</sup></code></td>
<td>Suspends the Horiz mode if it was set for the remainder of the program. Also clears the home screen upon execution and when the program returns. This will not properly restore the original setting if <code>Return<sup>r</sup></code> is used. Do not execute in a loop!</td>
<td class="all">26</td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code>Normal</code></td>
<td>Full speed mode is deactivated.</td>
<td class="all">3</td>
<td class="all" colspan="2"></td>
<td class="all">15</td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code>Pause <span class=EXP>EXP</span></code></td>
<td>Pause for the given amount of time. A one second pause is a value of roughly 1800 at normal speed or 4500 in full speed mode.</td>
<td class="all">7</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>~3349*<span class=EXP>EXP</span></span>
<div class="popup">3349*((<span class=EXP>EXP</span>-1)%65536) + 13*((<span class=REG>reg_b</span>-1)%256+1) + 16</div>
</td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code>getKey</code></td>
<td>Returns the last key pressed or zero if no keys were pressed. Its just like the BASIC getkey, but with different codes.</td>
<td class="all">6</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>~1100</span>
<div class="popup">
<table>
<tr>
<th>83+</th>
<th>84+SE</th>
</tr>
<tr>
<td class="all">~1000</td>
<td class="all">~1200</td>
</tr>
</table>
</div>
</td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code>getKey<sup>r</sup></code></td>
<td>Pauses until a key or key combination is pressed and returns the key code. These are different codes than the normal getkeys.</td>
<td class="all">3</td>
<td class="prgmapp" colspan="2">16</td>
<td class="fusion" colspan="2"></td>
<td class="all"></td>
</tr>
<tr class=newCommand>
<td><code>getKeys</code></td>
<td>Calls the OS keypad scanning function. That's the getKey token followed by an s (or an S).</td>
<td class="all">3</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>~1000</span>
<div class="popup">
<table>
<tr>
<th>No key pressed</th>
<th>Key pressed</th>
</tr>
<tr>
<td class="all">~1000</td>
<td class="all">~5000</td>
</tr>
</table>
</div>
</td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code>getKey(<span class=KEY>KEY</span>)</code></td>
<td>Returns 1 if the key is held down this instant and 0 otherwise.</td>
<td class="all">3</td>
<td class="prgmapp" rowspan="2">17</td>
<td class="prgmapp">
<span class=info>0</span>
<div class="popup">18 bytes if <span class=KEY>KEY</span> is not a constant</div>
</td>
<td class="fusion" rowspan="2"></td>
<td class="fusion"></td>
<td class="prgmapp">
<span class=info>~111</span>
<div class="popup">
<table>
<tr>
<th colspan="2" rowspan="2"></th>
<th colspan="2">Key state</th>
</tr>
<tr>
<th>Not Pressed</th>
<th>Pressed</th>
<tr>
<th rowspan="2"><span class=KEY>KEY</span> is...</th>
<th>a constant</th>
<td class="prgmapp">105</td>
<td class="prgmapp">117</td>
</tr>
<tr>
<th>not a constant</th>
<td class="prgmapp"><span class=info>[~335]</span><br/><br/>27*((<span class=KEY>KEY</span>-1)/8) + 24*(8-((<span class=KEY>KEY</span>-1)%8)) + 119</td>
<td class="prgmapp"><span class=info>[~347]</span><br/><br/>27*((<span class=KEY>KEY</span>-1)/8) + 24*(8-((<span class=KEY>KEY</span>-1)%8)) + 131</td>
</tr>
</table>
</div>
</td>
</tr>
<tr>
<td><code>getKey(<span class=CONST>0</span>)</code></td>
<td>Returns a non-zero number if any key is held down and 0 otherwise.</td>
<td class="all">5</td>
<td class="all"></td>
<td class="prgmapp">113</td>
<td class="fusion">123</td>
</tr>
<tr>
<td><code>getKey(<span class=CONST>41</span>)</code></td>
<td>Returns 1 if the ON key is held down this instant and 0 otherwise.</td>
<td class="all">9</td>
<td class="all" colspan="2"></td>
<td class="all">46</td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code>Asm(<span class=HEX>HEX</span>)</code></td>
<td>Native assembly code written in hexadecimal is inserted at the current position.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code>prgm<span class=NAME>NAME</span></code></td>
<td>The code from the external program is parsed as if it completely replaced this command in the main program. (Similar to the C++ "include")</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td>
<code>#Axiom(<span class=NAME>NAME</span>)</code>
<br/><span class=keyReplacement>AsmComp()</span>
</td>
<td>The Axiom assembly library becomes useable in the program. No quotes needed, just type the name of the appvar case sensitive.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td>
<code>#Icon(<span class=HEX>HEX</span>)</code>
<br/><span class=keyReplacement>identity()</span>
</td>
<td>Tells the parser to replace the default icon with the new icon. The icon must be 64 hex characters long.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td>
<code>#Realloc(<span class=CONST>PTR</span>)</code>
<br/><span class=keyReplacement>real()</span>
</td>
<td>Moves the variable buffer to another location in ram. If the field is left blank, the default location is restored.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td>
<code>#ExprOn</code>
<br/><span class=keyReplacement>ExprOn</span>
</td>
<td>Requests that all following code be optimized for speed.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td>
<code>#ExprOff</code>
<br/><span class=keyReplacement>ExprOff</span>
</td>
<td>Requests that all following code be optimized for size.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="2"></td>
</tr>
</table>
<table id=screenAndBufferCommands class=commandTable>
<caption>Screen and Buffer</caption>
<tr>
<th rowspan="2">Command</th>
<th rowspan="2">Description</th>
<th class="all" colspan="3">Size (bytes)</th>
<th class="all" rowspan="2">Speed<br/>(cycles)</th>
<td class="none" colspan="6"></td>
</tr>
<tr>
<th class="all">
<span class=info>Each Use</span>
<div class="popup"><span class=info>For commands that list special information given an argument is a constant or variable, treat the size of the argument as 0 bytes, unless otherwise stated.</span></div>
</th>
<th class="all" colspan="2">Once</th>
<td class="none" colspan="3"></td>
</tr>
 
<tr>
<td>
<code>DispGraph</code><br/>
<code>DispGraph(<span class=BUF>BUF</span>)</code>
</td>
<td>Draws the main buffer, or specified buffer, to the screen.</td>
<td class="all">3</td>
<td class="prgmapp" rowspan="7">27</td>
<td class="prgmapp">45</td>
<td class="fusion"></td>
<td class="fusion" rowspan="7"></td>
<td class="prgmapp">
<span class=info>~55639&nbsp;*<br/>~55629&nbsp;*</span>
<div class="popup">
<span class=info>* MOSTLY EXECUTED AT 6MHz</span><br/>
<br/>
<span class=info>Info reflects zero-argument version</span><br/>
<br/>
<table>
<tr>
<th></th>
<th>83+</th>
<th>84+SE</th>
<tr>
<th>Interrupts off</th>
<td class="prgmapp">55653</td>
<td class="prgmapp">136 cycles at original CPU speed,<br/>55523 cycles at 6MHz</td>
</tr>
<tr>
<th>Interrupts on</th>
<td class="prgmapp">55618</td>
<td class="prgmapp">144 cycles at original CPU speed,<br/>55480 cycles at 6MHz</td>
</tr>
</table>
</div>
</td>
<td class="fusion">
<span class=info>~55649&nbsp;*<br/>~55639&nbsp;*</span>
<div class="popup">
<span class=info>* MOSTLY EXECUTED AT 6MHz</span><br/>
<br/>
<span class=info>Info reflects zero-argument version</span><br/>
<br/>
<table>
<tr>
<th></th>
<th>83+</th>
<th>84+SE</th>
<tr>
<th>Interrupts off</th>
<td class="fusion">55663</td>
<td class="fusion">136 cycles at original CPU speed,<br/>55533 cycles at 6MHz</td>
</tr>
<tr>
<th>Interrupts on</th>
<td class="fusion">55628</td>
<td class="fusion">144 cycles at original CPU speed,<br/>55490 cycles at 6MHz</td>
</tr>
</table>
</div>
</td>
</tr> 
<tr>
<td>
<code>DispGraphClrDraw</code><br/>
<code>DispGraphClrDraw(<span class=BUF>BUF</span>)</code>
</td>
<td>Same as <code>DispGraph:ClrDraw</code>, but as fast as just <code>DispGraph</code>.</td>
<td class="all">3</td>
<td class="prgmapp">45</td>
<td class="fusion"></td>
<td class="prgmapp">
<span class=info>~55639&nbsp;*<br/>~55629&nbsp;*</span>
<div class="popup">
<span class=info>* MOSTLY EXECUTED AT 6MHz</span><br/>
<br/>
<span class=info>Info reflects zero-argument version</span><br/>
<br/>
<table>
<tr>
<th></th>
<th>83+</th>
<th>84+SE</th>
<tr>
<th>Interrupts off</th>
<td class="prgmapp">55653</td>
<td class="prgmapp">136 cycles at original CPU speed,<br/>55523 cycles at 6MHz</td>
</tr>
<tr>
<th>Interrupts on</th>
<td class="prgmapp">55618</td>
<td class="prgmapp">144 cycles at original CPU speed,<br/>55480 cycles at 6MHz</td>
</tr>
</table>
</div>
</td>
<td class="fusion">
<span class=info>~55649&nbsp;*<br/>~55639&nbsp;*</span>
<div class="popup">
<span class=info>* MOSTLY EXECUTED AT 6MHz</span><br/>
<br/>
<span class=info>Info reflects zero-argument version</span><br/>
<br/>
<table>
<tr>
<th></th>
<th>83+</th>
<th>84+SE</th>
<tr>
<th>Interrupts off</th>
<td class="fusion">55663</td>
<td class="fusion">136 cycles at original CPU speed,<br/>55533 cycles at 6MHz</td>
</tr>
<tr>
<th>Interrupts on</th>
<td class="fusion">55628</td>
<td class="fusion">144 cycles at original CPU speed,<br/>55490 cycles at 6MHz</td>
</tr>
</table>
</div>
</td>
</tr>
<tr>
<td>
<code>DispGraphRecallPic</code><br/>
<code>DispGraphRecallPic(<span class=BUF>BUF1</span>,<span class=BUF>BUF2</span>)</code>
</td>
<td>Same as <code>DispGraph:RecallPic</code>, but faster.</td>
<td class="all">3<br/>7</td>
<td class="prgmapp">68</td>
<td class="fusion"></td>
<td class="prgmapp">
<span class=info>~61000<br/>~61000</span>
</td>
<td class="fusion">
<span class=info>~61000<br/>~61000</span>
</td>
</tr>
<tr>
<td>
<code>DispGraph<sup>r</sup></code><br/>
<code>DispGraph(<span class=BUF>BUF1</span>,<span class=BUF>BUF2</span>)<sup>r</sup></code>
</td>
<td>Draws the main and back buffer, or specified buffers, to the screen to create 3 color grayscale.</td>
<td class="all">3<br/>5</td>
<td class="prgmapp">71</td>
<td class="fusion"></td>
<td class="prgmapp">
<span class=info>~63992&nbsp;*<br/>~64003&nbsp;*</span>
<div class="popup">
<span class=info>* MOSTLY EXECUTED AT 6MHz</span><br/>
<br/>
<span class=info>Info reflects zero-argument version</span><br/>
<br/>
<table>
<tr>
<th></th>
<th>83+</th>
<th>84+SE</th>
<tr>
<th>Interrupts off</th>
<td class="prgmapp">64006</td>
<td class="prgmapp">143 cycles at original CPU speed,<br/>63869 cycles at 6MHz</td>
</tr>
<tr>
<th>Interrupts on</th>
<td class="prgmapp">63971</td>
<td class="prgmapp">151 cycles at original CPU speed,<br/>63826 cycles at 6MHz</td>
</tr>
</table>
</div>
</td>
<td class="fusion">
<span class=info>~64002&nbsp;*<br/>~64013&nbsp;*</span>
<div class="popup">
<span class=info>* MOSTLY EXECUTED AT 6MHz</span><br/>
<br/>
<span class=info>Info reflects zero-argument version</span><br/>
<br/>
<table>
<tr>
<th></th>
<th>83+</th>
<th>84+SE</th>
<tr>
<th>Interrupts off</th>
<td class="fusion">64016</td>
<td class="fusion">143 cycles at original CPU speed,<br/>63879 cycles at 6MHz</td>
</tr>
<tr>
<th>Interrupts on</th>
<td class="fusion">63981</td>
<td class="fusion">151 cycles at original CPU speed,<br/>63836 cycles at 6MHz</td>
</tr>
</table>
</div>
</td>
</tr>
<tr>
<td>
<code>DispGraphClrDraw<sup>r</sup></code><br/>
<code>DispGraphClrDraw(<span class=BUF>BUF1</span>,<span class=BUF>BUF2</span>)<sup>r</sup></code>
</td>
<td>Same as <code>DispGraph<sup>r</sup>:ClrDraw<sup>rr</sup></code>, but as fast as just <code>DispGraph<sup>r</sup></code>.</td>
<td class="all">3<br/>5</td>
<td class="prgmapp">75</td>
<td class="fusion"></td>
<td class="prgmapp">
<span class=info>~64000<br/>~64000</span>
</td>
<td class="fusion">
<span class=info>~64000<br/>~64000</span>
</td>
</tr>
<tr>
<td>
<code>DispGraph<sup>rr</sup></code><br/>
<code>DispGraph(<span class=BUF>BUF1</span>,<span class=BUF>BUF2</span>)<sup>r</sup><sup>r</sup></code>
</td>
<td>Draws the main and back buffer, or specified buffers, to the screen to create 4 color grayscale.</td>
<td class="all">3<br/>5</td>
<td class="prgmapp">81</td>
<td class="fusion"></td>
<td class="prgmapp">
<span class=info>~64000<br/>~64000</span>
</td>
<td class="fusion">
<span class=info>~64000<br/>~64000</span>
</td>
</tr>
<tr>
<td>
<code>DispGraphClrDraw<sup>rr</sup></code><br/>
<code>DispGraphClrDraw(<span class=BUF>BUF1</span>,<span class=BUF>BUF2</span>)<sup>r</sup><sup>r</sup></code>
</td>
<td>Same as <code>DispGraph<sup>rr</sup>:ClrDraw<sup>rr</sup></code>, but as fast as just <code>DispGraph<sup>rr</sup></code>.</td>
<td class="all">3<br/>5</td>
<td class="prgmapp">85</td>
<td class="fusion"></td>
<td class="prgmapp">
<span class=info>~64500<br/>~64500</span>
</td>
<td class="fusion">
<span class=info>~64500<br/>~64500</span>
</td>
</tr>
<tr>
<td>
<code>ClrDraw</code><br/>
<code>ClrDraw<sup>r</sup></code><br/>
<code>ClrDraw(<span class=BUF>BUF</span>)</code>
</td>
<td>Erases the main buffer, back buffer, or specified buffer to white pixels.</td>
<td class="all">3<br/>6<br/>3</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>~17200</span>
<div class="popup">
<span class=info>Info reflects zero-argument versions</span><br/>
<br/>
<table>
<tr>
<th>83+</th>
<th>84+SE</th>
</tr>
<tr>
<td class="all">17074</td>
<td class="all">17317</td>
</tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code>ClrDraw<sup>rr</sup></code></td>
<td>Erases both the front and back buffers.</td>
<td class="all">9</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>~34400</span>
<div class="popup">
<table>
<tr>
<th>83+</th>
<th>84+SE</th>
</tr>
<tr>
<td class="all">34148</td>
<td class="all">34634</td>
</tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td>
<code>DrawInv</code><br/>
<code>DrawInv<sup>r</sup></code><br/>
<code>DrawInv(<span class=BUF>BUF</span>)</code>
</td>
<td>The colors on the main buffer, back buffer, or specified buffer are inverted.</td>
<td class="all">3<br/>6<br/>3</td>
<td class="prgmapp" colspan="2">16</td>
<td class="fusion" colspan="2"></td>
<td class="prgmapp">28491<br/>28491<br/>28481</td>
<td class="fusion">28501<br/>28501<br/>28491</td>
</tr>
<tr>
<td><code>StoreGDB</code></td>
<td>Takes a screenshot and saves it to the main buffer.</td>
<td class="all">6</td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code>StorePic</code></td>
<td>Copies the main buffer to the back buffer.</td>
<td class="all">11</td>
<td class="all" colspan="2"></td>
<td class="all">16153</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code>RecallPic</code></td>
<td>Copies the back buffer to the main buffer.</td>
<td class="all">11</td>
<td class="all" colspan="2"></td>
<td class="all">16153</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td>
<code>Horizontal+</code><br/>
<code>Horizontal+<sup>r</sup></code><br/>
<code>Horizontal+(<span class=BUF>BUF</span>)</code>
</td>
<td>The main buffer, back buffer, or specified buffer is shifted right by 1 pixel. White pixels are shifted in.</td>
<td class="all">3<br/>6<br/>3</td>
<td class="prgmapp" colspan="2">16</td>
<td class="fusion" colspan="2"></td>
<td class="prgmapp">27492<br/>27492<br/>27482</td>
<td class="fusion">27502<br/>27502<br/>27492</td>
</tr>
<tr>
<td>
<code>Horizontal-</code><br/>
<code>Horizontal-<sup>r</sup></code><br/>
<code>Horizontal-(<span class=BUF>BUF</span>)</code>
</td>
<td>The main buffer, back buffer, or specified buffer is shifted left by 1 pixel. White pixels are shifted in.</td>
<td class="all">3<br/>6<br/>6</td>
<td class="prgmapp" colspan="2">16</td>
<td class="fusion" colspan="2"></td>
<td class="prgmapp">27492<br/>27492<br/>27494</td>
<td class="fusion">27502<br/>27502<br/>27504</td>
</tr>
<tr>
<td>
<code>Vertical+</code><br/>
<code>Vertical+<sup>r</sup></code><br/>
<code>Vertical+(<span class=BUF>BUF</span>)</code>
</td>
<td>The main buffer, back buffer, or specified buffer is shifted down by 1 pixel. New pixels are not shifted in, that row remains the same.</td>
<td class="all">3<br/>9<br/>12</td>
<td class="prgmapp" colspan="2">12</td>
<td class="fusion" colspan="2"></td>
<td class="prgmapp">15928<br/>15928<br/>15951</td>
<td class="fusion">15938<br/>15938<br/>15961</td>
</tr>
<tr>
<td>
<code>Vertical-</code><br/>
<code>Vertical-<sup>r</sup></code><br/>
<code>Vertical-(<span class=BUF>BUF</span>)</code>
</td>
<td>The main buffer, back buffer, or specified buffer is shifted up by 1 pixel. New pixels are not shifted in, that row remains the same.</td>
<td class="all">3<br/>9<br/>8</td>
<td class="prgmapp" colspan="2">12</td>
<td class="fusion" colspan="2"></td>
<td class="prgmapp">15928<br/>15928<br/>15933</td>
<td class="fusion">15938<br/>15938<br/>15943</td>
</tr>
<tr class=newCommand>
<td><code>ZInterval <span class=EXP>EXP</span></code></td>
<td>Sets the LCD z-address, which sets a hardware vertical rotation of the LCD contents <span class=EXP>EXP</span> rows upwards.</td>
<td class="all">7</td>
<td class="all" colspan="2"></td>
<td class="all">29</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code>Shade()</code></td>
<td>Returns the LCD contrast value of the operating system before the program started.</td>
<td class="all">8</td>
<td class="all" colspan="2"></td>
<td class="all">31</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code>Shade(<span class=EXP>EXP</span>)</code></td>
<td>Sets the LCD contrast. 0 is lightest, 63 is darkest.</td>
<td class="all">5</td>
<td class="all" colspan="2"></td>
<td class="all">22</td>
<td class="none" colspan="3"></td>
</tr>
</table>
<table id=controlBlocksCommands class=commandTable>
<caption>Control Blocks</caption>
<tr>
<th rowspan="2">Command</th>
<th rowspan="2">Description</th>
<th class="all" colspan="3">Size (bytes)</th>
<th class="all" rowspan="2">Speed<br/>(cycles)</th>
</tr>
<tr>
<th class="all">
<span class=info>Each Use</span>
<div class="popup"><span class=info>For commands that list special information given an argument is a constant or variable, treat the size of the argument as 0 bytes, unless otherwise stated.</span></div>
</th>
<th class="all" colspan="2">Once</th>
</tr>
<tr>
<td><code>If <span class=EXP>EXP</span>:<span class=CODE>code1</span>:End</code></td>
<td>If <span class=EXP>EXP</span> is true, <span class=CODE>code1</span> will be executed.</td>
<td class="all">5</td>
<td class="all" colspan="2"></td>
<td class="all">18</td>
</tr>
<tr>
<td><code>If <span class=EXP>EXP</span>:<span class=CODE>code1</span>:Else:<span class=CODE>code2</span>:End</code></td>
<td>If <span class=EXP>EXP</span> is true, then only <span class=CODE>code1</span> is executed. Otherwise, only <span class=CODE>code2</span> is executed.</td>
<td class="all">8</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>28/18</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP</span> is true</th>
<th><span class=EXP>EXP</span> is false</th>
</tr>
<tr>
<td class="all">28</td>
<td class="all">18</td>
</tr>
</table>
</div>
</td>
</tr>
<tr>
<td><code>ElseIf <span class=EXP>EXP</span></code></td>
<td>Can be used inside <code>If</code> blocks. If <span class=EXP>EXP</span> is true, the block's code is executed and then skips to the end of the block.</td>
<td class="all">5</td>
<td class="all" colspan="2"></td>
<td class="all">18</td>
</tr>
<tr>
<td><code>!If <span class=EXP>EXP</span>:<span class=CODE>code1</span>:End</code></td>
<td>If <span class=EXP>EXP</span> is false, <span class=CODE>code1</span> will be executed.</td>
<td class="all">5</td>
<td class="all" colspan="2"></td>
<td class="all">18</td>
</tr>
<tr>
<td><code>!If <span class=EXP>EXP</span>:<span class=CODE>code1</span>:Else:<span class=CODE>code2</span>:End</code></td>
<td>If <span class=EXP>EXP</span> is false, then only <span class=CODE>code1</span> is executed. Otherwise, only <span class=CODE>code2</span> is executed.</td>
<td class="all">8</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>28/18</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP</span> is false</th>
<th><span class=EXP>EXP</span> is true</th>
</tr>
<tr>
<td class="all">28</td>
<td class="all">18</td>
</tr>
</table>
</div>
</td>
</tr>
<tr>
<td><code>Else!If <span class=EXP>EXP</span></code></td>
<td>Can be used inside <code>If</code> blocks. If <span class=EXP>EXP</span> is false, the block's code is executed and then skips to the end of the block.</td>
<td class="all">5</td>
<td class="all" colspan="2"></td>
<td class="all">18</td>
</tr>
<tr>
<td><code>While <span class=EXP>EXP</span>:<span class=CODE>code1</span>:End</code></td>
<td>The expression is checked first. If its true, <span class=CODE>code1</span> will be executed over and over until its false.</td>
<td class="all">
<span class=info>7</span>
<div class="popup">
<table>
<tr>
<th rowspan="2"></th>
<th colspan="2">Size of <span class=EXP>EXP</span> and <span class=CODE>code1</span> is...</th>
</tr>
<tr>
<th>&le;126 bytes</th>
<th>&gt;126 bytes</th>
</tr>
<tr>
<th><span class=EXP>EXP</span> exactly matches "1" (treat size as 0 bytes)</th>
<td class="all">4</td>
<td class="all">5</td>
</tr>
<tr>
<th><span class=EXP>EXP</span> is anything else</th>
<td class="all">7</td>
<td class="all">8</td>
</tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th rowspan="2"></th>
<th colspan="2">Size of <span class=EXP>EXP</span> and <span class=CODE>code1</span> is...</th>
</tr>
<tr>
<th>&le;126 bytes</th>
<th>&gt;126 bytes</th>
</tr>
<tr>
<th><span class=EXP>EXP</span> exactly matches "1" (treat size as 0 bytes)</th>
<td class="all">(<span class=EXP>cycles_code1</span>+12)*<span class=EXP>iterations</span></td>
<td class="all">(<span class=EXP>cycles_code1</span>+10)*<span class=EXP>iterations</span></td>
</tr>
<tr>
<th><span class=EXP>EXP</span> is anything else</th>
<td class="all">(<span class=EXP>cycles_EXP</span>+<span class=EXP>cycles_code1</span>+30)*(<span class=EXP>iterations</span>+1) - 10</td>
<td class="all">(<span class=EXP>cycles_EXP</span>+<span class=EXP>cycles_code1</span>+28)*(<span class=EXP>iterations</span>+1) - 10</td>
</tr>
</table>
</div>
</td>
</tr>
<tr>
<td><code>Repeat <span class=EXP>EXP</span>:<span class=CODE>code1</span>:End</code></td>
<td>The expression is checked first. If its false, <span class=CODE>code1</span> will be executed over and over until its true.</td>
<td class="all">
<span class=info>7</span>
<div class="popup">
<table>
<tr>
<th rowspan="2"></th>
<th colspan="2">Size of <span class=EXP>EXP</span> and <span class=CODE>code1</span> is...</th>
</tr>
<tr>
<th>&le;126 bytes</th>
<th>&gt;126 bytes</th>
</tr>
<tr>
<th><span class=EXP>EXP</span> exactly matches "0" (treat size as 0 bytes)</th>
<td class="all">4</td>
<td class="all">5</td>
</tr>
<tr>
<th><span class=EXP>EXP</span> is anything else</th>
<td class="all">7</td>
<td class="all">8</td>
</tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th rowspan="2"></th>
<th colspan="2">Size of <span class=EXP>EXP</span> and <span class=CODE>code1</span> is...</th>
</tr>
<tr>
<th>&le;126 bytes</th>
<th>&gt;126 bytes</th>
</tr>
<tr>
<th><span class=EXP>EXP</span> exactly matches "0" (treat size as 0 bytes)</th>
<td class="all">(<span class=EXP>cycles_code1</span>+12)*<span class=EXP>iterations</span></td>
<td class="all">(<span class=EXP>cycles_code1</span>+10)*<span class=EXP>iterations</span></td>
</tr>
<tr>
<th><span class=EXP>EXP</span> is anything else</th>
<td class="all">(<span class=EXP>cycles_EXP</span>+<span class=EXP>cycles_code1</span>+30)*(<span class=EXP>iterations</span>+1) - 10</td>
<td class="all">(<span class=EXP>cycles_EXP</span>+<span class=EXP>cycles_code1</span>+28)*(<span class=EXP>iterations</span>+1) - 10</td>
</tr>
</table>
</div>
</td>
</tr>
<tr>
<td><code>For(<span class=EXP>EXP</span>):<span class=CODE>code1</span>:End</code></td>
<td>Executes <span class=CODE>code1</span> exactly <span class=EXP>EXP</span> times. 0 is not a valid number of iterations and will act as 65536. <code>Goto</code> cannot be used inside this structure.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th rowspan="2"></th>
<th colspan="3">Size of <span class=CODE>code1</span> is...</th>
</tr>
<tr>
<th>&le;121 bytes</th>
<th>else, &le;124 bytes</th>
<th>else, &gt;124 bytes</th>
<tr>
<th><span class=EXP>EXP</span> is a constant from 1-256</th>
<td class="all" colspan="2">6</td>
<td class="all">8</td>
</tr>
<tr>
<th><span class=EXP>EXP</span> is any other constant</th>
<td class="all">10</td>
<td class="all">11</td>
<td class="all">12</td>
</tr>
<tr>
<th><span class=EXP>EXP</span> is not a constant</th>
<td class="all">12</td>
<td class="all">13</td>
<td class="all">14</td>
</tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th rowspan="2"></th>
<th colspan="3">Size of <span class=CODE>code1</span> is...</th>
</tr>
<tr>
<th>&le;121 bytes</th>
<th>else, &le;124 bytes</th>
<th>else, &gt;124 bytes</th>
<tr>
<th><span class=EXP>EXP</span> is a constant from 1-256</th>
<td class="all" colspan="2">(<span class=EXP>cycles_code1</span>+34)*<span class=EXP>iterations</span> + 2</td>
<td class="all">(<span class=EXP>cycles_code1</span>+35)*<span class=EXP>iterations</span> + 7</td>
</tr>
<tr>
<th><span class=EXP>EXP</span> is any other constant</th>
<td class="all"><span class=nowrap><span class=info>[~(<span class=EXP>cycles_code1</span>+34)*<span class=EXP>iterations</span>]</span></span><br/><br/>(<span class=EXP>cycles_code1</span>+34)*<span class=EXP>iterations</span> + 11*((<span class=EXP>iterations</span>-1)/256+1)+5</td>
<td class="all"><span class=nowrap><span class=info>[~(<span class=EXP>cycles_code1</span>+34)*<span class=EXP>iterations</span>]</span></span><br/><br/>(<span class=EXP>cycles_code1</span>+34)*<span class=EXP>iterations</span> + 9*((<span class=EXP>iterations</span>-1)/256+1)+10</td>
<td class="all"><span class=nowrap><span class=info>[~(<span class=EXP>cycles_code1</span>+35)*<span class=EXP>iterations</span>]</span></span><br/><br/>(<span class=EXP>cycles_code1</span>+35)*<span class=EXP>iterations</span> + 26*((<span class=EXP>iterations</span>-1)/256+1)-5</td>
</tr>
<tr>
<th><span class=EXP>EXP</span> is not a constant</th>
<td class="all"><span class=nowrap><span class=info>[~(<span class=EXP>cycles_code1</span>+34)*<span class=EXP>iterations</span>]</span></span><br/><br/>(<span class=EXP>cycles_code1</span>+34)*<span class=EXP>iterations</span> + 11*((<span class=EXP>iterations</span>-1)/256+1)+27</td>
<td class="all"><span class=nowrap><span class=info>[~(<span class=EXP>cycles_code1</span>+34)*<span class=EXP>iterations</span>]</span></span><br/><br/>(<span class=EXP>cycles_code1</span>+34)*<span class=EXP>iterations</span> + 9*((<span class=EXP>iterations</span>-1)/256+1)+32</td>
<td class="all"><span class=nowrap><span class=info>[~(<span class=EXP>cycles_code1</span>+35)*<span class=EXP>iterations</span>]</span></span><br/><br/>(<span class=EXP>cycles_code1</span>+35)*<span class=EXP>iterations</span> + 26*((<span class=EXP>iterations</span>-1)/256+1)+17</td>
</tr>
</table>
</div>
</td>
</tr>
<tr>
<td><code>For(<span class=EXP>EXP</span>)<sup>r</sup>:<span class=CODE>code1</span>:End</code></td>
<td>Executes <span class=CODE>code1</span> exactly <span class=EXP>EXP</span>%256 times. 0 is not a valid number of iterations and will act as 256. <code>Goto</code> cannot be used inside this structure.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th rowspan="2"></th>
<th colspan="2">Size of <span class=CODE>code1</span> is...</th>
</tr>
<tr>
<th>&le;124 bytes</th>
<th>&gt;124 bytes</th>
<tr>
<th><span class=EXP>EXP</span> is a constant</th>
<td class="all">6</td>
<td class="all">8</td>
</tr>
<tr>
<th><span class=EXP>EXP</span> is not a constant</th>
<td class="all">5</td>
<td class="all">7</td>
</tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th rowspan="2"></th>
<th colspan="2">Size of <span class=CODE>code1</span> is...</th>
</tr>
<tr>
<th>&le;124 bytes</th>
<th>&gt;124 bytes</th>
<tr>
<th><span class=EXP>EXP</span> is a constant</th>
<td class="all">(<span class=EXP>cycles_code1</span>+34)*<span class=EXP>iterations</span> + 2</td>
<td class="all">(<span class=EXP>cycles_code1</span>+35)*<span class=EXP>iterations</span> + 7</td>
</tr>
<tr>
<th><span class=EXP>EXP</span> is not a constant</th>
<td class="all">(<span class=EXP>cycles_code1</span>+34)*<span class=EXP>iterations</span> - 1</td>
<td class="all">(<span class=EXP>cycles_code1</span>+35)*<span class=EXP>iterations</span> + 4</td>
</tr>
</table>
</div>
</td>
</tr>
<tr>
<td><code>For(<span class=VAR>VAR</span>,<span class=EXP>EXP1</span>,<span class=EXP>EXP2</span>):<span class=CODE>code1</span>:End</code></td>
<td>The variable <span class=VAR>VAR</span> is initialized with <span class=EXP>EXP1</span>. If its greater than <span class=EXP>EXP2</span>, the loop ends. Otherwise <span class=CODE>code1</span> is executed and <span class=VAR>VAR</span> is incremented by 1.</td>
<td class="all">
<span class=info>19</span>
<div class="popup">
<table>
<tr>
<th rowspan="2"></th>
<th colspan="2">Size of <span class=EXP>EXP2</span> and <span class=CODE>code1</span> is...</th>
</tr>
<tr>
<th>&le;111 bytes</th>
<th>&gt;111 bytes</th>
</tr>
<tr>
<th><span class=EXP>EXP2</span> is a constant (treat size as 2 bytes)</th>
<td class="all" rowspan="3">19</td>
<td class="all" rowspan="3">20</td>
</tr>
<tr>
<th><span class=EXP>EXP2</span> is a variable (treat size as 2 bytes)</th>
</tr>
<tr>
<th><span class=EXP>EXP2</span> is an expression</th>
</tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<span class=info>The speed of all inputs is included in the table entries</span><br/>
<br/>
<table>
<tr>
<th rowspan="2"></th>
<th colspan="2">Size of <span class=EXP>EXP2</span> and <span class=CODE>code1</span> is...</th>
</tr>
<tr>
<th>&le;111 bytes</th>
<th>&gt;111 bytes</th>
</tr>
<tr>
<th><span class=EXP>EXP2</span> is a constant (treat size as 2 bytes)</th>
<td class="all">(<span class=EXP>cycles_code1</span>+93)*<span class=EXP>iterations</span> + <span class=EXP>cycles_EXP1</span> + 71</td>
<td class="all">(<span class=EXP>cycles_code1</span>+91)*<span class=EXP>iterations</span> + <span class=EXP>cycles_EXP1</span> + 71</td>
</tr>
<tr>
<th><span class=EXP>EXP2</span> is a variable (treat size as 2 bytes)</th>
<td class="all">(<span class=EXP>cycles_code1</span>+99)*<span class=EXP>iterations</span> + <span class=EXP>cycles_EXP1</span> + 77</td>
<td class="all">(<span class=EXP>cycles_code1</span>+97)*<span class=EXP>iterations</span> + <span class=EXP>cycles_EXP1</span> + 77</td>
</tr>
<tr>
<th><span class=EXP>EXP2</span> is an expression</th>
<td class="all">(<span class=EXP>cycles_EXP2</span>+<span class=EXP>cycles_code1</span>+100)*<span class=EXP>iterations</span> + <span class=EXP>cycles_EXP2</span> + <span class=EXP>cycles_EXP1</span> + 78</td>
<td class="all">(<span class=EXP>cycles_EXP2</span>+<span class=EXP>cycles_code1</span>+98)*<span class=EXP>iterations</span> + <span class=EXP>cycles_EXP2</span> + <span class=EXP>cycles_EXP1</span> + 78</td>
</tr>
</table>
</div>
</td>
</tr>
<tr>
<td><code>DS&lt;(<span class=VAR>VAR</span>,<span class=MAX>MAX</span>):<span class=CODE>code1</span>:End</code></td>
<td>The variable <span class=VAR>VAR</span> is decreased by 1. If its 0, <span class=CODE>code1</span> is executed and the variable resets back to <span class=MAX>MAX</span>. Otherwise the code is skipped.</td>
<td class="all">15</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>72/56</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>VAR</span> is 0</th>
<th><span class=EXP>VAR</span> is not 0</th>
</tr>
<tr>
<td class="all">72</td>
<td class="all">56</td>
</tr>
</table>
</div>
</td>
</tr>
<tr>
<td><code>EndIf <span class=EXP>EXP</span></code></td>
<td>In loops, it will exit the loop if <span class=EXP>EXP</span> is true. But it works just like a regular <code>End</code> otherwise.</td>
<td class="all">
<span class=info>+2 *</span>
<div class="popup"><span class=info>* 2 bytes larger than a normal End</span></div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>+8 *</span>
<div class="popup"><span class=info>* 8 cycles more per iteration than a normal End</span></div>
</td>
</tr>
<tr>
<td><code>End!If <span class=EXP>EXP</span></code></td>
<td>In loops, it will exit the loop if <span class=EXP>EXP</span> is false. But it works just like a regular <code>End</code> otherwise.</td>
<td class="all">
<span class=info>+2 *</span>
<div class="popup"><span class=info>* 2 bytes larger than a normal End</span></div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>+8 *</span>
<div class="popup"><span class=info>* 8 cycles more per iteration than a normal End</span></div>
</td>
</tr>
</table>
<table id=labelsAndSubroutinesCommands class=commandTable>
<caption>Labels and Subroutines</caption>
<tr>
<th rowspan="2">Command</th>
<th rowspan="2">Description</th>
<th class="all" colspan="3">Size (bytes)</th>
<th class="all" rowspan="2">Speed<br/>(cycles)</th>
<td class="none" colspan="7"></td>
</tr>
<tr>
<th class="all">
<span class=info>Each Use</span>
<div class="popup"><span class=info>For commands that list special information given an argument is a constant or variable, treat the size of the argument as 0 bytes, unless otherwise stated.</span></div>
</th>
<th class="all" colspan="2">Once</th>
<td class="none" colspan="4"></td>
</tr>
<tr>
<td><code>Lbl <span class=LBL>LBL</span></code></td>
<td>Creates a label at the current position.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="4"></td>
</tr>
<tr>
<td><code>Goto <span class=LBL>LBL</span></code></td>
<td>Jumps to the label.</td>
<td class="all">3</td>
<td class="all" colspan="2"></td>
<td class="all">10</td>
<td class="none" colspan="4"></td>
</tr>
<tr>
<td><code>Goto (<span class=EXP>EXP</span>)</code></td>
<td>Jumps to a label defined by an expression.</td>
<td class="all">1</td>
<td class="all" colspan="2"></td>
<td class="all">4</td>
<td class="none" colspan="4"></td>
</tr>
<tr>
<td><code>sub(<span class=LBL>LBL</span>,...)</code></td>
<td>Loads 0 to 6 arguments to the <span class=VAR>r<sub>1</sub></span> through <span class=LBL>r<sub>6</sub></span> variables respectively. Then the subroutine is called. Most subroutines should end with a Return.</td>
<td class="all">
<span class=info>3*n+3</span>
<div class="popup">3*<span class=EXP>num_arguments</span> + 3</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>16*n+17</span>
<div class="popup">16*<span class=EXP>num_arguments</span> + 17</div>
</td>
<td class="none" colspan="4"></td>
</tr>
<tr>
<td><code>sub(<span class=LBL>LBL</span><sup>r</sup>,...)</code></td>
<td>Same as above except the argument variables it uses are saved before the subroutine is called and restored when it returns.</td>
<td class="all">
<span class=info>12*n+3</span>
<div class="popup">12*<span class=EXP>num_arguments</span> + 3</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>73*n+17</span>
<div class="popup">73*<span class=EXP>num_arguments</span> + 17</div>
</td>
<td class="none" colspan="4"></td>
</tr>
<tr>
<td><code><span class=LBL>LBL</span>(...)</code></td>
<td>Same as <code>sub(</code> but with a simpler-to-type format. Also takes 0 to 6 arguments.</td>
<td class="all">
<span class=info>3*n+3</span>
<div class="popup">3*<span class=EXP>num_arguments</span> + 3</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>16*n+17</span>
<div class="popup">16*<span class=EXP>num_arguments</span> + 17</div>
</td>
<td class="none" colspan="4"></td>
</tr>
<tr>
<td><code>(<span class=EXP>EXP</span>)(...)</code></td>
<td>Same as above but with a subroutine defined by an expression.</td>
<td class="all">4</td>
<td class="prgmapp" colspan="2">6</td>
<td class="fusion" colspan="2"></td>
<td class="prgmapp">73</td>
<td class="fusion">83</td>
<td class="none"></td>
</tr>
<tr>
<td><code>Return</code></td>
<td>Returns from a subroutine. If not in a subroutine, the program will end.</td>
<td class="all">1</td>
<td class="all" colspan="2"></td>
<td class="all">10</td>
<td class="none" colspan="4"></td>
</tr>
<tr>
<td><code>Return<sup>r</sup></code></td>
<td>Emergency exits the program from within any number of nested calls.</td>
<td class="prgm">7</td>
<td class="app">3</td>
<td class="fusion">9</td>
<td class="all" colspan="2"></td>
<td class="prgm">44</td>
<td class="app"></td>
<td class="fusion">53</td>
</tr>
<tr>
<td><code>ReturnIf <span class=EXP>EXP</span></code></td>
<td>Returns if <span class=EXP>EXP</span> is true. Otherwise continues execution.</td>
<td class="all">3</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>19/13</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP</span> is true</th>
<th><span class=EXP>EXP</span> is false</th>
</tr>
<tr>
<td class="all">19</td>
<td class="all">13</td>
</tr>
</table>
</div>
</td>
<td class="none" colspan="4"></td>
</tr>
<tr>
<td><code>Return!If <span class=EXP>EXP</span></code></td>
<td>Returns if <span class=EXP>EXP</span> is false. Otherwise continues execution.</td>
<td class="all">3</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>19/13</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP</span> is false</th>
<th><span class=EXP>EXP</span> is true</th>
</tr>
<tr>
<td class="all">19</td>
<td class="all">13</td>
</tr>
</table>
</div>
</td>
<td class="none" colspan="4"></td>
</tr>
<tr>
<td><code><sub>L</sub><span class=LBL>LBL</span></code></td>
<td>Returns the address of the label.</td>
<td class="all">3</td>
<td class="all" colspan="2"></td>
<td class="all">10</td>
<td class="none" colspan="4"></td>
</tr>
<tr>
<td>
<code>&lambda;(<span class=EXP>EXP</span>)</code>
<br/><span class=keyReplacement>log()</span>
</td>
<td>Creates a subroutine that computes an expression in terms of <span class=VAR>r<sub>1</sub></span> through <span class=VAR>r<sub>6</sub></span>. Returns the address of that subroutine.</td>
<td class="all">4</td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="4"></td>
</tr>
<tr>
<td><code>Z-Test(<span class=EXP>EXP</span>,<span class=LBL>LBL</span>,...)</code></td>
<td>Checks the expression. If its 0, it will jump to the first label, if its 1, it will jump to the second, etc. If out of range, it will skip the command.</td>
<td class="all">9</td>
<td class="prgmapp" colspan="2">10</td>
<td class="fusion" colspan="2"></td>
<td class="prgmapp">
<span class=info>128</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP</span> is in range</th>
<th><span class=EXP>EXP</span> is not in range</th>
</tr>
<tr>
<td class="all">128</td>
<td class="all">59</td>
</tr>
</table>
</div>
</td>
<td class="fusion">
<span class=info>138</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP</span> is in range</th>
<th><span class=EXP>EXP</span> is not in range</th>
</tr>
<tr>
<td class="all">138</td>
<td class="all">69</td>
</tr>
</table>
</div>
</td>
<td class="none"></td>
</tr>
</table>
<table id=basicMathCommands class=commandTable>
<caption>Basic Math</caption>
<tr>
<th rowspan="2">Command</th>
<th rowspan="2">Description</th>
<th class="all" colspan="3">Size (bytes)</th>
<th class="all" rowspan="2">Speed<br/>(cycles)</th>
<td class="none" colspan="6"></td>
</tr>
<tr>
<th class="all">
<span class=info>Each Use</span>
<div class="popup"><span class=info>For commands that list special information given an argument is a constant or variable, treat the size of the argument as 0 bytes, unless otherwise stated.</span></div>
</th>
<th class="all" colspan="2">Once</th>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=CONST>CONST</span></code></td>
<td>Returns the constant.</td>
<td class="all">3</td>
<td class="all" colspan="2"></td>
<td class="all">10</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=VAR>VAR</span></code></td>
<td>Returns the variable. Uppercase <span class=VAR>A</span> through <span class=VAR>Z</span>, <span class=VAR>&theta;</span>, <span class=VAR>r<sub>1</sub></span> through <span class=VAR>r<sub>6</sub></span>, and <span class=VAR>X<sub>1T</sub></span> through <span class=VAR>Y<sub>6T</sub></span> are variables as well as custom named variables.</td>
<td class="all">3</td>
<td class="all" colspan="2"></td>
<td class="all">16</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=VAR>VAR</span><sup>r</sup></code></td>
<td>Returns the low byte of the variable.</td>
<td class="all">5</td>
<td class="all" colspan="2"></td>
<td class="all">23</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=VAR>VAR</span><sup>r</sup><sup>r</sup></code></td>
<td>Returns the big-endian value of the variable.</td>
<td class="all">6</td>
<td class="all" colspan="2"></td>
<td class="all">28</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code>°<span class=VAR>VAR</span></code></td>
<td>Returns the address of the variable in memory.</td>
<td class="all">3</td>
<td class="all" colspan="2"></td>
<td class="all">10</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP</span>&rarr;<span class=VAR>VAR</span></code></td>
<td>Stores the expression into the variable.</td>
<td class="all">3</td>
<td class="all" colspan="2"></td>
<td class="all">16</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP</span>&rarr;<span class=VAR>VAR</span><sup>r</sup></code></td>
<td>Stores the expression into the low byte of the variable.</td>
<td class="all">4</td>
<td class="all" colspan="2"></td>
<td class="all">17</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP</span>&rarr;<span class=VAR>VAR</span><sup>r</sup><sup>r</sup></code></td>
<td>Stores the expression into the variable in big-endian.</td>
<td class="all">6</td>
<td class="all" colspan="2"></td>
<td class="all">28</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code>'<span class=CHAR>CHAR</span>'</code></td>
<td>The ASCII constant as an integer.</td>
<td class="all">3</td>
<td class="all" colspan="2"></td>
<td class="all">10</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code>-<span class=EXP>EXP</span></code>
<td>Returns the negative of the expression. That's a negative sign, not a minus sign!</td>
<td class="all">6</td>
<td class="all" colspan="2"></td>
<td class="all">24</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>+<span class=EXP>EXP2</span></code></td>
<td><span class=EXP>EXP2</span> is added to <span class=EXP>EXP1</span>.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>&plusmn;0</th>
<th>&plusmn;1</th>
<th>&plusmn;2</th>
<th>&plusmn;3</th>
<th>&plusmn;254</th>
<th>&plusmn;255</th>
<th>&plusmn;256</th>
<th>&plusmn;257</th>
<th>&plusmn;258</th>
<th>&plusmn;510</th>
<th>&plusmn;511</th>
<th>&plusmn;512</th>
<th>&plusmn;513</th>
<th>&plusmn;514</th>
</tr>
<tr>
<td class="all">0</td>
<td class="all">1</td>
<td class="all">2</td>
<td class="all">3</td>
<td class="all">3</td>
<td class="all">2</td>
<td class="all">1</td>
<td class="all">2</td>
<td class="all">3</td>
<td class="all">4</td>
<td class="all">3</td>
<td class="all">2</td>
<td class="all">3</td>
<td class="all">4</td>
</tr>
</table>
<table class=float>
<tr>
<th>&plusmn;767</th>
<th>&plusmn;768</th>
<th>&plusmn;769</th>
<th>&plusmn;1024</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">4</td>
<td class="all">3</td>
<td class="all">4</td>
<td class="all">4</td>
<td class="all">4</td>
<td class="all">5</td>
<td class="all">3</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>&plusmn;0</th>
<th>&plusmn;1</th>
<th>&plusmn;2</th>
<th>&plusmn;3</th>
<th>&plusmn;254</th>
<th>&plusmn;255</th>
<th>&plusmn;256</th>
<th>&plusmn;257</th>
<th>&plusmn;258</th>
<th>&plusmn;510</th>
<th>&plusmn;511</th>
<th>&plusmn;512</th>
<th>&plusmn;513</th>
<th>&plusmn;514</th>
</tr>
<tr>
<td class="all">0</td>
<td class="all">6</td>
<td class="all">12</td>
<td class="all">18</td>
<td class="all">16</td>
<td class="all">14</td>
<td class="all">12</td>
<td class="all">14</td>
<td class="all">16</td>
<td class="all">20</td>
<td class="all">14</td>
<td class="all">8</td>
<td class="all">14</td>
<td class="all">20</td>
</tr>
</table>
<table class=float>
<tr>
<th>&plusmn;767</th>
<th>&plusmn;768</th>
<th>&plusmn;769</th>
<th>&plusmn;1024</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">18</td>
<td class="all">12</td>
<td class="all">18</td>
<td class="all">16</td>
<td class="all">21</td>
<td class="all">31</td>
<td class="all">32</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>-<span class=EXP>EXP2</span></code></td>
<td><span class=EXP>EXP2</span> is subtracted from <span class=EXP>EXP1</span>.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>&plusmn;0</th>
<th>&plusmn;1</th>
<th>&plusmn;2</th>
<th>&plusmn;3</th>
<th>&plusmn;254</th>
<th>&plusmn;255</th>
<th>&plusmn;256</th>
<th>&plusmn;257</th>
<th>&plusmn;258</th>
<th>&plusmn;510</th>
<th>&plusmn;511</th>
<th>&plusmn;512</th>
<th>&plusmn;513</th>
<th>&plusmn;514</th>
</tr>
<tr>
<td class="all">0</td>
<td class="all">1</td>
<td class="all">2</td>
<td class="all">3</td>
<td class="all">3</td>
<td class="all">2</td>
<td class="all">1</td>
<td class="all">2</td>
<td class="all">3</td>
<td class="all">4</td>
<td class="all">3</td>
<td class="all">2</td>
<td class="all">3</td>
<td class="all">4</td>
</tr>
</table>
<table class=float>
<tr>
<th>&plusmn;767</th>
<th>&plusmn;768</th>
<th>&plusmn;769</th>
<th>&plusmn;1024</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">4</td>
<td class="all">3</td>
<td class="all">4</td>
<td class="all">4</td>
<td class="all">4</td>
<td class="all">7</td>
<td class="all">6</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>&plusmn;0</th>
<th>&plusmn;1</th>
<th>&plusmn;2</th>
<th>&plusmn;3</th>
<th>&plusmn;254</th>
<th>&plusmn;255</th>
<th>&plusmn;256</th>
<th>&plusmn;257</th>
<th>&plusmn;258</th>
<th>&plusmn;510</th>
<th>&plusmn;511</th>
<th>&plusmn;512</th>
<th>&plusmn;513</th>
<th>&plusmn;514</th>
</tr>
<tr>
<td class="all">0</td>
<td class="all">6</td>
<td class="all">12</td>
<td class="all">18</td>
<td class="all">16</td>
<td class="all">14</td>
<td class="all">12</td>
<td class="all">14</td>
<td class="all">16</td>
<td class="all">20</td>
<td class="all">14</td>
<td class="all">8</td>
<td class="all">14</td>
<td class="all">20</td>
</tr>
</table>
<table class=float>
<tr>
<th>&plusmn;767</th>
<th>&plusmn;768</th>
<th>&plusmn;769</th>
<th>&plusmn;1024</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">18</td>
<td class="all">12</td>
<td class="all">18</td>
<td class="all">16</td>
<td class="all">21</td>
<td class="all">39</td>
<td class="all">44</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP</span>++</code></td>
<td>The variable or memory location is incremented by 1. Memory locations need curly brackets.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th>{<span class=CONST>CONST</span>}++</th>
<th><span class=VAR>VAR</span><sup>r</sup>++</th>
<td class="all">4</td>
<th>{<span class=EXP>EXP</span>}++</th>
<td class="all">1</td>
</tr>
<tr>
<th>{<span class=CONST>CONST</span>}<sup>r</sup>++</th>
<th><span class=VAR>VAR</span>++</th>
<td class="all">7</td>
<th>{<span class=EXP>EXP</span>}<sup>r</sup>++</th>
<td class="all">5</td>
</tr>
<tr>
<th>{<span class=CONST>CONST</span>}<sup>r</sup><sup>r</sup>++</th>
<th><span class=VAR>VAR</span><sup>r</sup><sup>r</sup>++</th>
<td class="all">8</td>
<th>{<span class=EXP>EXP</span>}<sup>r</sup><sup>r</sup>++</th>
<td class="all">6</td>
</tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th colspan="2" rowspan="2"></th>
<th colspan="2">Low byte...</th>
<th rowspan="2"></th>
<th colspan="2">Low byte...</th>
</tr>
<tr>
<th>&ne;255</th>
<th>=255</th>
<th>&ne;255</th>
<th>=255</th>
</tr>
<tr>
<th>{<span class=CONST>CONST</span>}++</th>
<th><span class=VAR>VAR</span><sup>r</sup>++</th>
<td class="all" colspan="2">25</td>
<th>{<span class=EXP>EXP</span>}++</th>
<td class="all" colspan="2">15</td>
</tr>
<tr>
<th>{<span class=CONST>CONST</span>}<sup>r</sup>++</th>
<th><span class=VAR>VAR</span>++</th>
<td class="all" colspan="2">38</td>
<th>{<span class=EXP>EXP</span>}<sup>r</sup>++</th>
<td class="all">27</td>
<td class="all">43</td>
</tr>
<tr>
<th>{<span class=CONST>CONST</span>}<sup>r</sup><sup>r</sup>++</th>
<th><span class=VAR>VAR</span><sup>r</sup><sup>r</sup>++</th>
<td class="all">37</td>
<td class="all">53</td>
<th>{<span class=EXP>EXP</span>}<sup>r</sup><sup>r</sup>++</th>
<td class="all">33</td>
<td class="all">49</td>
</tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP</span>--</code></td>
<td>The variable or memory location is decremented by 1. Memory locations need curly brackets.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th>{<span class=CONST>CONST</span>}--</th>
<th><span class=VAR>VAR</span><sup>r</sup>--</th>
<td class="all">4</td>
<th>{<span class=EXP>EXP</span>}--</th>
<td class="all">1</td>
</tr>
<tr>
<th>{<span class=CONST>CONST</span>}<sup>r</sup>--</th>
<th><span class=VAR>VAR</span>--</th>
<td class="all">7</td>
<th>{<span class=EXP>EXP</span>}<sup>r</sup>--</th>
<td class="all">7</td>
</tr>
<tr>
<th>{<span class=CONST>CONST</span>}<sup>r</sup><sup>r</sup>--</th>
<th><span class=VAR>VAR</span><sup>r</sup><sup>r</sup>--</th>
<td class="all">10</td>
<th>{<span class=EXP>EXP</span>}<sup>r</sup><sup>r</sup>--</th>
<td class="all">7</td>
</tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th colspan="2" rowspan="2"></th>
<th colspan="2">Low byte...</th>
<th rowspan="2"></th>
<th colspan="2">Low byte...</th>
</tr>
<tr>
<th>&ne;0</th>
<th>=0</th>
<th>&ne;0</th>
<th>=0</th>
</tr>
<tr>
<th>{<span class=CONST>CONST</span>}--</th>
<th><span class=VAR>VAR</span><sup>r</sup>--</th>
<td class="all" colspan="2">25</td>
<th>{<span class=EXP>EXP</span>}--</th>
<td class="all" colspan="2">15</td>
</tr>
<tr>
<th>{<span class=CONST>CONST</span>}<sup>r</sup>--</th>
<th><span class=VAR>VAR</span>--</th>
<td class="all" colspan="2">38</td>
<th>{<span class=EXP>EXP</span>}<sup>r</sup>--</th>
<td class="all">38</td>
<td class="all">54</td>
</tr>
<tr>
<th>{<span class=CONST>CONST</span>}<sup>r</sup><sup>r</sup>--</th>
<th><span class=VAR>VAR</span><sup>r</sup><sup>r</sup>--</th>
<td class="all">48</td>
<td class="all">64</td>
<th>{<span class=EXP>EXP</span>}<sup>r</sup><sup>r</sup>--</th>
<td class="all" colspan="2">46</td>
</tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>*<span class=EXP>EXP2</span></code><br/></td>
<td><span class=EXP>EXP1</span> is multiplied by <span class=EXP>EXP2</span>.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>12</th>
<th>16</th>
<th>32</th>
<th>64</th>
<th>128</th>
<th>255</th>
</tr>
<tr>
<td class="all">3</td>
<td class="all">0</td>
<td class="all">1</td>
<td class="all">4</td>
<td class="all">2</td>
<td class="all">5</td>
<td class="all">5</td>
<td class="all">6</td>
<td class="all">3</td>
<td class="all">6</td>
<td class="all">6</td>
<td class="all">6</td>
<td class="all">4</td>
<td class="all">5</td>
<td class="all">6</td>
<td class="all">5</td>
<td class="all">6</td>
</tr>
</table>
<table class=float>
<tr>
<th>256</th>
<th>257</th>
<th>258</th>
<th>260</th>
<th>264</th>
<th>512</th>
<th>513</th>
<th>514</th>
<th>516</th>
<th>520</th>
<th>768</th>
</tr>
<tr>
<td class="all">3</td>
<td class="all">3</td>
<td class="all">4</td>
<td class="all">5</td>
<td class="all">6</td>
<td class="all">4</td>
<td class="all">6</td>
<td class="all">4</td>
<td class="all">5</td>
<td class="all">6</td>
<td class="all">6</td>
</tr>
</table>
<table class=float>
<tr>
<th>1024</th>
<th>1028</th>
<th>1032</th>
<th>2048</th>
<th>2056</th>
<th>4096</th>
<th>8192</th>
<th>16384</th>
<th>32768</th>
<th>-1</th>
</tr>
<tr>
<td class="all">5</td>
<td class="all">5</td>
<td class="all">6</td>
<td class="all">6</td>
<td class="all">6</td>
<td class="all">6</td>
<td class="all">5</td>
<td class="all">6</td>
<td class="all">6</td>
<td class="all">6</td>
</tr>
</table>
<table class=float>
<tr>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">6</td>
<td class="all">7</td>
<td class="all">5</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="prgmapp" colspan="2" rowspan="2">
<span class=info>18</span>
<div class="popup">For multiplication, not needed if <span class=EXP>EXP2</span> has a constant optimization.</div>
</td>
<td class="fusion" colspan="2" rowspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>12</th>
<th>16</th>
<th>32</th>
<th>64</th>
<th>128</th>
<th>255</th>
</tr>
<tr>
<td class="all">10</td>
<td class="all">0</td>
<td class="all">11</td>
<td class="all">30</td>
<td class="all">22</td>
<td class="all">41</td>
<td class="all">41</td>
<td class="all">52</td>
<td class="all">33</td>
<td class="all">52</td>
<td class="all">52</td>
<td class="all">52</td>
<td class="all">44</td>
<td class="all">55</td>
<td class="all">66</td>
<td class="all">170</td>
<td class="all">31</td>
</tr>
</table>
<table class=float>
<tr>
<th>256</th>
<th>257</th>
<th>258</th>
<th>260</th>
<th>264</th>
<th>512</th>
<th>513</th>
<th>514</th>
<th>516</th>
<th>520</th>
<th>768</th>
</tr>
<tr>
<td class="all">11</td>
<td class="all">12</td>
<td class="all">23</td>
<td class="all">34</td>
<td class="all">45</td>
<td class="all">22</td>
<td class="all">37</td>
<td class="all">23</td>
<td class="all">34</td>
<td class="all">45</td>
<td class="all">23</td>
</tr>
</table>
<table class=float>
<tr>
<th>1024</th>
<th>1028</th>
<th>1032</th>
<th>2048</th>
<th>2056</th>
<th>4096</th>
<th>8192</th>
<th>16384</th>
<th>32768</th>
<th>-1</th>
</tr>
<tr>
<td class="all">33</td>
<td class="all">34</td>
<td class="all">45</td>
<td class="all">44</td>
<td class="all">45</td>
<td class="all">212</td>
<td class="all">314</td>
<td class="all">247</td>
<td class="all">24</td>
<td class="all">24</td>
</tr>
</table>
<table class=float>
<tr>
<th colspan="2"></th>
<th>any other constant</th>
<th>a variable</th>
<th colspan="2"></th>
<th>an expression</th>
</tr>
<tr>
<th rowspan="2"><span class=EXP>EXP1</span>/256...</th>
<th>=0</th>
<td class="prgmapp"><span class=info>[~408]</span><br/>6*<span class=EXP>num_bits_set_EXP1</span> + 390</td>
<td class="fusion"><span class=info>[~418]</span><br/>6*<span class=EXP>num_bits_set_EXP1</span> + 400</td>
<td class="prgmapp"><span class=info>[~418]</span><br/>6*<span class=EXP>num_bits_set_EXP1</span> + 400</td>
<td class="fusion"><span class=info>[~428]</span><br/>6*<span class=EXP>num_bits_set_EXP1</span> + 410</td>
<th rowspan="2"><span class=EXP>EXP2</span>/256...</th>
<th>=0</th>
<td class="prgmapp"><span class=info>[~419]</span><br/>6*<span class=EXP>num_bits_set_EXP2</span> + 401</td>
<td class="fusion"><span class=info>[~429]</span><br/>6*<span class=EXP>num_bits_set_EXP2</span> + 411</td>
</tr>
<tr>
<th>&ne;0</th>
<td class="prgmapp"><span class=info>[~800]</span><br/>6*<span class=EXP>num_bits_set_EXP1</span> + 728</td>
<td class="fusion"><span class=info>[~810]</span><br/>6*<span class=EXP>num_bits_set_EXP1</span> + 738</td>
<td class="prgmapp"><span class=info>[~810]</span><br/>6*<span class=EXP>num_bits_set_EXP1</span> + 738</td>
<td class="fusion"><span class=info>[~820]</span><br/>6*<span class=EXP>num_bits_set_EXP1</span> + 748</td>
<th>&ne;0</th>
<td class="prgmapp"><span class=info>[~811]</span><br/>6*<span class=EXP>num_bits_set_EXP2</span> + 739</td>
<td class="fusion"><span class=info>[~821]</span><br/>6*<span class=EXP>num_bits_set_EXP2</span> + 749</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP</span><sup>2</sup></code></td>
<td><span class=EXP>EXP</span> is multiplied by itself.</td>
<td class="all">5</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th rowspan="2"><span class=EXP>EXP1</span>/256...</th>
<th>=0</th>
<td class="prgmapp"><span class=info>[~406]</span><br/>6*<span class=EXP>num_bits_set_EXP</span> + 388</td>
<td class="fusion"><span class=info>[~416]</span><br/>6*<span class=EXP>num_bits_set_EXP</span> + 398</td>
</tr>
<tr>
<th>&ne;0</th>
<td class="prgmapp"><span class=info>[~798]</span><br/>6*<span class=EXP>num_bits_set_EXP</span> + 726</td>
<td class="fusion"><span class=info>[~808]</span><br/>6*<span class=EXP>num_bits_set_EXP</span> + 736</td>
</tr>
</table>
</div>
</td>
<td class="none"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>^<span class=EXP>EXP2</span></code><br/></td>
<td><span class=EXP>EXP1</span> is taken modulo <span class=EXP>EXP2</span>.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>4</th>
<th>8</th>
<th>16</th>
<th>32</th>
<th>64</th>
<th>128</th>
<th>256</th>
<th>512</th>
<th>1024</th>
</tr>
<tr>
<td class="all">3</td>
<td class="all">0</td>
<td class="all">5</td>
<td class="all">6</td>
<td class="all">6</td>
<td class="all">6</td>
<td class="all">6</td>
<td class="all">6</td>
<td class="all">4</td>
<td class="all">2</td>
<td class="all">4</td>
<td class="all">4</td>
</tr>
</table><table class=float>
<tr>
<th>2048</th>
<th>4096</th>
<th>8192</th>
<th>16384</th>
<th>32768</th>
<th>10</th>
</tr>
<tr>
<td class="all">4</td>
<td class="all">4</td>
<td class="all">4</td>
<td class="all">4</td>
<td class="all">2</td>
<td class="all">6</td>
</tr>
</table>
<table class=float>
<tr>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">6</td>
<td class="all">7</td>
<td class="all">6</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="prgmapp" rowspan="2">22</td>
<td class="fusion" rowspan="2"></td>
<td class="all"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>4</th>
<th>8</th>
<th>16</th>
<th>32</th>
<th>64</th>
<th>128</th>
<th>256</th>
<th>512</th>
<th>1024</th>
</tr>
<tr>
<td class="all">10</td>
<td class="all">0</td>
<td class="all">20</td>
<td class="all">22</td>
<td class="all">22</td>
<td class="all">22</td>
<td class="all">22</td>
<td class="all">22</td>
<td class="all">15</td>
<td class="all">7</td>
<td class="all">15</td>
<td class="all">15</td>
</tr>
</table><table class=float>
<tr>
<th>2048</th>
<th>4096</th>
<th>8192</th>
<th>16384</th>
<th>32768</th>
<th>10</th>
</tr>
<tr>
<td class="all">15</td>
<td class="all">15</td>
<td class="all">15</td>
<td class="all">15</td>
<td class="all">8</td>
<td class="all">
<table>
<tr>
<th>83+</th>
<th>84+SE</th>
</tr>
<tr>
<td class="all"><span class=info>[~1682]</span><br/>3*<span class=EXP>num_bits_set_quotient</span> + 1667</td>
<td class="all"><span class=info>[~1907]</span><br/>3*<span class=EXP>num_bits_set_quotient</span> + 1892</td>
</tr>
</table>
</td>
</tr>
</table>
<table class=float>
<tr>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="prgmapp"><span class=info>[~1323]</span><br/>-10*<span class=EXP>num_bits_set_quotient</span> + 1353</td>
<td class="fusion"><span class=info>[~1333]</span><br/>-10*<span class=EXP>num_bits_set_quotient</span> + 1363</td>
<td class="prgmapp"><span class=info>[~1333]</span><br/>-10*<span class=EXP>num_bits_set_quotient</span> + 1363</td>
<td class="fusion"><span class=info>[~1343]</span><br/>-10*<span class=EXP>num_bits_set_quotient</span> + 1373</td>
<td class="prgmapp"><span class=info>[~1338]</span><br/>-10*<span class=EXP>num_bits_set_quotient</span> + 1368</td>
<td class="fusion"><span class=info>[~1348]</span><br/>-10*<span class=EXP>num_bits_set_quotient</span> + 1378</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>/<span class=EXP>EXP2</span></code><br/></td>
<td><span class=EXP>EXP1</span> is divided by <span class=EXP>EXP2</span>.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>128</th>
<th>256</th>
<th>512</th>
<th>32768</th>
<th>10</th>
</tr>
<tr>
<td class="all">3</td>
<td class="all">0</td>
<td class="all">4</td>
<td class="all">5</td>
<td class="all">3</td>
<td class="all">5</td>
<td class="all">5</td>
<td class="all">3</td>
</tr>
</table>
<table class=float>
<tr>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">6</td>
<td class="all">7</td>
<td class="all">6</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="prgmapp">24</td>
<td class="fusion"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>128</th>
<th>256</th>
<th>512</th>
<th>32768</th>
<th>10</th>
</tr>
<tr>
<td class="all">10</td>
<td class="all">0</td>
<td class="all">16</td>
<td class="all">27</td>
<td class="all">11</td>
<td class="all">19</td>
<td class="all">27</td>
<td class="all">
<table>
<tr>
<th>83+</th>
<th>84+SE</th>
</tr>
<tr>
<td class="all"><span class=info>[~1671]</span><br/>3*<span class=EXP>num_bits_set_quotient</span> + 1656</td>
<td class="all"><span class=info>[~1896]</span><br/>3*<span class=EXP>num_bits_set_quotient</span> + 1881</td>
</tr>
</table>
</td>
</tr>
</table>
<table class=float>
<tr>
<th colspan="2"></th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<th rowspan="3"><span class=EXP>EXP2</span>/128...</th>
<th>=0</th>
<td class="prgmapp"><span class=info>[~890]</span><br/>3*<span class=EXP>num_bits_set_quotient</span> + 875</td>
<td class="fusion"><span class=info>[~900]</span><br/>3*<span class=EXP>num_bits_set_quotient</span> + 885</td>
<td class="prgmapp"><span class=info>[~900]</span><br/>3*<span class=EXP>num_bits_set_quotient</span> + 885</td>
<td class="fusion"><span class=info>[~910]</span><br/>3*<span class=EXP>num_bits_set_quotient</span> + 895</td>
<td class="prgmapp"><span class=info>[~905]</span><br/>3*<span class=EXP>num_bits_set_quotient</span> + 890</td>
<td class="fusion"><span class=info>[~915]</span><br/>3*<span class=EXP>num_bits_set_quotient</span> + 900</td>
</tr>
<tr>
<th>=1</th>
<td class="prgmapp"><span class=info>[~880]</span><br/>3*<span class=EXP>num_bits_set_quotient</span> + <span class=EXP>something_weird</span> + 875</td>  
<td class="fusion"><span class=info>[~890]</span><br/>3*<span class=EXP>num_bits_set_quotient</span> + <span class=EXP>something_weird</span> + 885</td>
<td class="prgmapp"><span class=info>[~890]</span><br/>3*<span class=EXP>num_bits_set_quotient</span> + <span class=EXP>something_weird</span> + 885</td>
<td class="fusion"><span class=info>[~900]</span><br/>3*<span class=EXP>num_bits_set_quotient</span> + <span class=EXP>something_weird</span> + 895</td>
<td class="prgmapp"><span class=info>[~895]</span><br/>3*<span class=EXP>num_bits_set_quotient</span> + <span class=EXP>something_weird</span> + 890</td>
<td class="fusion"><span class=info>[~905]</span><br/>3*<span class=EXP>num_bits_set_quotient</span> + <span class=EXP>something_weird</span> + 900</td>
</tr>
<tr>
<th>&gt;1</th>
<td class="prgmapp"><span class=info>[~1373]</span><br/>-10*<span class=EXP>num_bits_set_quotient</span> + 1403</td>
<td class="fusion"><span class=info>[~1383]</span><br/>-10*<span class=EXP>num_bits_set_quotient</span> + 1413</td>
<td class="prgmapp"><span class=info>[~1383]</span><br/>-10*<span class=EXP>num_bits_set_quotient</span> + 1413</td>
<td class="fusion"><span class=info>[~1393]</span><br/>-10*<span class=EXP>num_bits_set_quotient</span> + 1423</td>
<td class="prgmapp"><span class=info>[~1388]</span><br/>-10*<span class=EXP>num_bits_set_quotient</span> + 1418</td>
<td class="fusion"><span class=info>[~1398]</span><br/>-10*<span class=EXP>num_bits_set_quotient</span> + 1428</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>=<span class=EXP>EXP2</span></code></td>
<td>Returns 1 if <span class=EXP>EXP1</span>=<span class=EXP>EXP2</span> or 0 otherwise.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>256</th>
<th>512</th>
<th>-512</th>
<th>-256</th>
<th>-2</th>
<th>-1</th>
</tr>
<tr>
<td class="all">7</td>
<td class="all">7</td>
<td class="all">8</td>
<td class="all">8</td>
<td class="all">9</td>
<td class="all">9</td>
<td class="all">8</td>
<td class="all">8</td>
<td class="all">7</td>
</tr>
</table>
<table class=float>
<tr>
<th>any other constant from -256 to 256</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">9</td>
<td class="all">11</td>
<td class="all">12</td>
<td class="all">10</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th></th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>256</th>
<th>512</th>
<th>-512</th>
<th>-256</th>
<th>-2</th>
<th>-1</th>
</tr>
<tr>
<th><span class=EXP>EXP1</span>=<span class=EXP>EXP2</span></th>
<td class="all" rowspan="2">36</td>
<td class="all">24</td>
<td class="all">28</td>
<td class="all" rowspan="2">40</td>
<td class="all" rowspan="2">44</td>
<td class="all" rowspan="2">44</td>
<td class="all" rowspan="2">40</td>
<td class="all" rowspan="2">40</td>
<td class="all" rowspan="2">36</td>
</tr>
<tr>
<th><span class=EXP>EXP1</span>&ne;<span class=EXP>EXP2</span></th>
<td class="all">34</td>
<td class="all">38</td>
</tr>
</table>
<table class=float>
<tr>
<th></th>
<th>any other constant from -256 to 256</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<th><span class=EXP>EXP1</span>=<span class=EXP>EXP2</span></th>
<td class="all" rowspan="2">43</td>
<td class="all">48</td>
<td class="all">58</td>
<td class="all">59</td>
</tr>
<tr>
<th><span class=EXP>EXP1</span>&ne;<span class=EXP>EXP2</span></th>
<td class="all">49</td>
<td class="all">59</td>
<td class="all">60</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>&ne;<span class=EXP>EXP2</span></code></td>
<td>Returns 1 if <span class=EXP>EXP1</span>&ne;<span class=EXP>EXP2</span> or 0 otherwise.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>256</th>
<th>512</th>
<th>-512</th>
<th>-256</th>
<th>-2</th>
<th>-1</th>
</tr>
<tr>
<td class="all">7</td>
<td class="all">8</td>
<td class="all">9</td>
<td class="all">8</td>
<td class="all">9</td>
<td class="all">9</td>
<td class="all">8</td>
<td class="all">8</td>
<td class="all">7</td>
</tr>
</table>
<table class=float>
<tr>
<th>any other constant from -256 to 256</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">9</td>
<td class="all">11</td>
<td class="all">12</td>
<td class="all">10</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th></th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>256</th>
<th>512</th>
<th>-512</th>
<th>-256</th>
<th>-2</th>
<th>-1</th>
</tr>
<tr>
<th><span class=EXP>EXP1</span>&ne;<span class=EXP>EXP2</span></th>
<td class="all">25</td>
<td class="all">29</td>
<td class="all">33</td>
<td class="all">29</td>
<td class="all">33</td>
<td class="all">33</td>
<td class="all">29</td>
<td class="all" rowspan="2">40</td>
<td class="all" rowspan="2">36</td>
</tr>
<tr>
<th><span class=EXP>EXP1</span>=<span class=EXP>EXP2</span></th>
<td class="all">20</td>
<td class="all">24</td>
<td class="all">28</td>
<td class="all">24</td>
<td class="all">28</td>
<td class="all">28</td>
<td class="all">24</td>
</tr>
</table>
<table class=float>
<tr>
<th></th>
<th>any other constant from -256 to 256</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<th><span class=EXP>EXP1</span>=<span class=EXP>EXP2</span></th>
<td class="all" rowspan="2">43</td>
<td class="all">46</td>
<td class="all">56</td>
<td class="all">57</td>
</tr>
<tr>
<th><span class=EXP>EXP1</span>&ne;<span class=EXP>EXP2</span></th>
<td class="all">41</td>
<td class="all">51</td>
<td class="all">52</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>&gt;<span class=EXP>EXP2</span></code></td>
<td>Returns 1 if <span class=EXP>EXP1</span>&gt;<span class=EXP>EXP2</span> or 0 otherwise. This is an unsigned comparison.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>255</th>
<th>65535</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">7</td>
<td class="all">6</td>
<td class="all">3</td>
<td class="all">8</td>
<td class="all">10</td>
<td class="all">8</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th></th>
<th>0</th>
<th>255</th>
<th>65535</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<th><span class=EXP>EXP1</span>&gt;<span class=EXP>EXP2</span>
<td class="all">27</td>
<td class="all" rowspan="2">32</td>
<td class="all" rowspan="2">10</td>
<td class="all" rowspan="2">37</td>
<td class="all" rowspan="2">60</td>
<td class="all" rowspan="2">52</td>
</tr>
<tr>
<th><span class=EXP>EXP1</span>&le;<span class=EXP>EXP2</span>
<td class="all">22</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>&ge;<span class=EXP>EXP2</span></code></td>
<td>Returns 1 if <span class=EXP>EXP1</span>&ge;<span class=EXP>EXP2</span> or 0 otherwise. This is an unsigned comparison.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>1</th>
<th>256</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">3</td>
<td class="all">7</td>
<td class="all">6</td>
<td class="all">8</td>
<td class="all">10</td>
<td class="all">9</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th></th>
<th>0</th>
<th>1</th>
<th>256</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<th><span class=EXP>EXP1</span>&ge;<span class=EXP>EXP2</span>
<td class="all" rowspan="2">10</td>
<td class="all">27</td>
<td class="all" rowspan="2">32</td>
<td class="all" rowspan="2">37</td>
<td class="all" rowspan="2">60</td>
<td class="all" rowspan="2">65</td>
</tr>
<tr>
<th><span class=EXP>EXP1</span>&lt;<span class=EXP>EXP2</span>
<td class="all">22</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>&lt;<span class=EXP>EXP2</span></code></td>
<td>Returns 1 if <span class=EXP>EXP1</span>&lt;<span class=EXP>EXP2</span> or 0 otherwise. This is an unsigned comparison.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>1</th>
<th>256</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">3</td>
<td class="all">7</td>
<td class="all">6</td>
<td class="all">7</td>
<td class="all">10</td>
<td class="all">8</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>1</th>
<th>256</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">10</td>
<td class="all">36</td>
<td class="all">32</td>
<td class="all">42</td>
<td class="all">51</td>
<td class="all">61</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>&le;<span class=EXP>EXP2</span></code></td>
<td>Returns 1 if <span class=EXP>EXP1</span>&le;<span class=EXP>EXP2</span> or 0 otherwise. This is an unsigned comparison.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>255</th>
<th>65535</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">7</td>
<td class="all">6</td>
<td class="all">3</td>
<td class="all">7</td>
<td class="all">11</td>
<td class="all">8</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>255</th>
<th>65535</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">36</td>
<td class="all">32</td>
<td class="all">10</td>
<td class="all">42</td>
<td class="all">64</td>
<td class="all">61</td>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span> and <span class=EXP>EXP2</span></code></td>
<td>Returns the bitwise AND of the lower 8 bits of the expressions. For logical AND, see the ? command.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0 (mod 256)</th>
<th>255 (mod 256)</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">2</td>
<td class="all">0</td>
<td class="all">4</td>
<td class="all">7</td>
<td class="all">5</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0 (mod 256)</th>
<th>255 (mod 256)</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">7</td>
<td class="all">0</td>
<td class="all">15</td>
<td class="all">32</td>
<td class="all">33</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span> or <span class=EXP>EXP2</span></code></td>
<td>Returns the bitwise OR of the lower 8 bits of the expressions. For logical OR, see the ?? command.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0 (mod 256)</th>
<th>255 (mod 256)</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">0</td>
<td class="all">2</td>
<td class="all">4</td>
<td class="all">7</td>
<td class="all">5</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0 (mod 256)</th>
<th>255 (mod 256)</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">0</td>
<td class="all">7</td>
<td class="all">15</td>
<td class="all">32</td>
<td class="all">33</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span> xor <span class=EXP>EXP2</span></code></td>
<td>Returns the bitwise XOR of the lower 8 bits of the expressions.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0 (mod 256)</th>
<th>255 (mod 256)</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">0</td>
<td class="all">3</td>
<td class="all">4</td>
<td class="all">7</td>
<td class="all">5</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0 (mod 256)</th>
<th>255 (mod 256)</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">0</td>
<td class="all">12</td>
<td class="all">15</td>
<td class="all">32</td>
<td class="all">33</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code>not(<span class=EXP>EXP</span>)</code></td>
<td>Returns the bitwise complement of the lower 8 bits.</td>
<td class="all">3</td>
<td class="all" colspan="2"></td>
<td class="all">12</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code>&radic;(<span class=EXP>EXP</span>)</code></td>
<td>Returns the square root of the expression.</td>
<td class="all">3</td>
<td class="prgmapp" colspan="2">28</td>
<td class="fusion" colspan="2"></td>
<td class="prgmapp">
<span class=info>~813</span>
<div class="popup">-6*<span class=EXP>num_bits_set_result</span> + 831</div>
</td>
<td class="fusion">
<span class=info>~823</span>
<div class="popup">-6*<span class=EXP>num_bits_set_result</span> + 841</div>
</td>
</tr>
<tr>
<td><code>sin(<span class=EXP>EXP</span>)</code></td>
<td>Returns the sine of the expression. One period is <code>[0,256]</code> and the value returned ranges from <code>-127</code> to <code>127</code>.</td>
<td class="all">3</td>
<td class="prgmapp" colspan="2" rowspan="2">31</td>
<td class="fusion" colspan="2" rowspan="2"></td>
<td class="prgmapp">~375</td>  
<td class="fusion">~385</td>
</tr>
<tr>
<td><code>cos(<span class=EXP>EXP</span>)</code></td>
<td>Returns the cosine of the expression. One period is <code>[0,256]</code> and the value returned ranges from <code>-127</code> to <code>127</code>.</td>
<td class="all">3</td>
<td class="prgmapp">~390</td>  
<td class="fusion">~400</td>
</tr>
<tr>
<td><code>tan<sup>-1</sup>(<span class=DX>DX</span>,<span class=DY>DY</span>)</code></td>
<td>Returns the angle of a path that has moved <span class=DX>DX</span> to the right and <span class=DY>DY</span> up. One period is <code>[0,256]</code> and both <span class=DX>DX</span> and <span class=DY>DY</span> must be in the range <code>[-512,512]</code></td>
<td class="all">4</td>
<td class="prgmapp">
<span class=info>*</span>
<div class="popup">Requires the signed division routine (35 bytes), which requires the division routine (24 bytes), which requires the modulus routine (22 bytes)</div>
</td>
<td class="fusion"></td>
<td class="prgmapp">34</td>
<td class="fusion"></td>
<td class="prgmapp">~1300</td>  
<td class="fusion">~1320</td>
</tr>
<tr>
<td><code>min(<span class=EXP>EXP1</span>,<span class=EXP>EXP2</span>)</code></td>
<td>Returns the minimum of the 2 expressions.</td>
<td class="all">7</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>~38</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP1</span>&le;<span class=EXP>EXP2</span></th>
<th><span class=EXP>EXP2</span>&gt;<span class=EXP>EXP2</span></th>
</tr>
<tr>
<td class="all">35</td>
<td class="all">41</td>
</tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code>max(<span class=EXP>EXP1</span>,<span class=EXP>EXP2</span>)</code></td>
<td>Returns the maximum of the 2 expressions.</td>
<td class="all">7</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>~38</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP1</span>&gt;<span class=EXP>EXP2</span></th>
<th><span class=EXP>EXP2</span>&le;<span class=EXP>EXP2</span></th>
</tr>
<tr>
<td class="all">35</td>
<td class="all">41</td>
</tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code>rand</code></td>
<td>Returns a random 16-bit number.</td>
<td class="all">3</td>
<td class="prgmapp" colspan="2">14</td>
<td class="fusion" colspan="2"></td>
<td class="prgmapp">88</td>
<td class="fusion">98</td>
</tr>
<tr>
<td><code><span class=COND>COND</span>?<span class=EXP>EXP</span></code></td>
<td>If the condition is true, <span class=EXP>EXP</span> is evaluated. Can be used as an <code>and</code> short circuit operator like <code>&&</code> in C syntax.</td>
<td class="all">5</td>
<td class="all" colspan="2"></td>
<td class="all">18</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=COND>COND</span>?<span class=EXP>EXP1</span>,<span class=EXP>EXP2</span></code></td>
<td>If the condition is true, <span class=EXP>EXP1</span> is evaluated. Otherwise, <span class=EXP>EXP2</span> is evaluated.</td>
<td class="all">8</td>
<td class="all" colspan="2"></td>
<td class="all">28/18</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=COND>COND</span>??<span class=EXP>EXP</span></code></td>
<td>If the condition is false, <span class=EXP>EXP</span> is evaluated. Can be used as an <code>or</code> short circuit operator like <code>||</code> in C syntax.</td>
<td class="all">5</td>
<td class="all" colspan="2"></td>
<td class="all">18</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=COND>COND</span>??<span class=EXP>EXP1</span>,<span class=EXP>EXP2</span></code></td>
<td>If the condition is false, <span class=EXP>EXP1</span> is evaluated. Otherwise, <span class=EXP>EXP2</span> is evaluated.</td>
<td class="all">8</td>
<td class="all" colspan="2"></td>
<td class="all">28/18</td>
<td class="none" colspan="3"></td>
</tr>
</table>
<table id=advancedMathCommands class=commandTable>
<caption>Advanced Math</caption>
<tr>
<th rowspan="2">Command</th>
<th rowspan="2">Description</th>
<th class="all" colspan="3">Size (bytes)</th>
<th class="all" rowspan="2">Speed<br/>(cycles)</th>
<td class="none" colspan="6"></td>
</tr>
<tr>
<th class="all">
<span class=info>Each Use</span>
<div class="popup"><span class=info>For commands that list special information given an argument is a constant or variable, treat the size of the argument as 0 bytes, unless otherwise stated.</span></div>
</th>
<th class="all" colspan="2">Once</th>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><small>E</small><span class=HEX>HEX</span></code></td>
<td>The hexadecimal number as an integer. That prefix is the scientific notation "E".</td>
<td class="all">3</td>
<td class="all" colspan="2"></td>
<td class="all">10</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code>&pi;<span class=BIN>BIN</span></code></td>
<td>The binary number as an integer.</td>
<td class="all">3</td>
<td class="all" colspan="2"></td>
<td class="all">10</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><small><sup>T</sup></small><span class=TOKEN>TOKEN</span></code></td>
<td>The 1 or 2 byte token as an integer. That prefix is the transpose symbol <code><sup>T</sup></code>.</td>
<td class="all">3</td>
<td class="all" colspan="2"></td>
<td class="all">10</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=INT>INT</span>.<span class=DEC>DEC</span></code></td>
<td>The non-integer decimal number as an 8.8 fixed point number. Maximum 3 decimal places allowed.</td>
<td class="all">3</td>
<td class="all" colspan="2"></td>
<td class="all">10</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>==<span class=EXP>EXP2</span></code></td>
<td>Returns 1 if <span class=EXP>EXP1</span>=<span class=EXP>EXP2</span> or 0 otherwise. Same as the single equals operator.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>256</th>
<th>512</th>
<th>-512</th>
<th>-256</th>
<th>-2</th>
<th>-1</th>
</tr>
<tr>
<td class="all">7</td>
<td class="all">7</td>
<td class="all">8</td>
<td class="all">8</td>
<td class="all">9</td>
<td class="all">9</td>
<td class="all">8</td>
<td class="all">8</td>
<td class="all">7</td>
</tr>
</table>
<table class=float>
<tr>
<th>any other constant from -256 to 256</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">9</td>
<td class="all">11</td>
<td class="all">12</td>
<td class="all">10</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th></th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>256</th>
<th>512</th>
<th>-512</th>
<th>-256</th>
<th>-2</th>
<th>-1</th>
</tr>
<tr>
<th><span class=EXP>EXP1</span>=<span class=EXP>EXP2</span></th>
<td class="all" rowspan="2">36</td>
<td class="all">24</td>
<td class="all">28</td>
<td class="all" rowspan="2">40</td>
<td class="all" rowspan="2">44</td>
<td class="all" rowspan="2">44</td>
<td class="all" rowspan="2">40</td>
<td class="all" rowspan="2">40</td>
<td class="all" rowspan="2">36</td>
</tr>
<tr>
<th><span class=EXP>EXP1</span>&ne;<span class=EXP>EXP2</span></th>
<td class="all">34</td>
<td class="all">38</td>
</tr>
</table>
<table class=float>
<tr>
<th></th>
<th>any other constant from -256 to 256</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<th><span class=EXP>EXP1</span>=<span class=EXP>EXP2</span></th>
<td class="all" rowspan="2">43</td>
<td class="all">48</td>
<td class="all">58</td>
<td class="all">59</td>
</tr>
<tr>
<th><span class=EXP>EXP1</span>&ne;<span class=EXP>EXP2</span></th>
<td class="all">49</td>
<td class="all">59</td>
<td class="all">60</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>&ne;&ne;<span class=EXP>EXP2</span></code></td>
<td>Returns 1 if <span class=EXP>EXP1</span>&ne;<span class=EXP>EXP2</span> or 0 otherwise. Same as the single not-equals operator.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>256</th>
<th>512</th>
<th>-512</th>
<th>-256</th>
<th>-2</th>
<th>-1</th>
</tr>
<tr>
<td class="all">7</td>
<td class="all">8</td>
<td class="all">9</td>
<td class="all">8</td>
<td class="all">9</td>
<td class="all">9</td>
<td class="all">8</td>
<td class="all">8</td>
<td class="all">7</td>
</tr>
</table>
<table class=float>
<tr>
<th>any other constant from -256 to 256</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">9</td>
<td class="all">11</td>
<td class="all">12</td>
<td class="all">10</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th></th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>256</th>
<th>512</th>
<th>-512</th>
<th>-256</th>
<th>-2</th>
<th>-1</th>
</tr>
<tr>
<th><span class=EXP>EXP1</span>&ne;<span class=EXP>EXP2</span></th>
<td class="all">25</td>
<td class="all">29</td>
<td class="all">33</td>
<td class="all">29</td>
<td class="all">33</td>
<td class="all">33</td>
<td class="all">29</td>
<td class="all" rowspan="2">40</td>
<td class="all" rowspan="2">36</td>
</tr>
<tr>
<th><span class=EXP>EXP1</span>=<span class=EXP>EXP2</span></th>
<td class="all">20</td>
<td class="all">24</td>
<td class="all">28</td>
<td class="all">24</td>
<td class="all">28</td>
<td class="all">28</td>
<td class="all">24</td>
</tr>
</table>
<table class=float>
<tr>
<th></th>
<th>any other constant from -256 to 256</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<th><span class=EXP>EXP1</span>=<span class=EXP>EXP2</span></th>
<td class="all" rowspan="2">43</td>
<td class="all">46</td>
<td class="all">56</td>
<td class="all">57</td>
</tr>
<tr>
<th><span class=EXP>EXP1</span>&ne;<span class=EXP>EXP2</span></th>
<td class="all">41</td>
<td class="all">51</td>
<td class="all">52</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>&gt;<span class=EXP>EXP2</span></code></td>
<td>Returns 1 if <span class=EXP>EXP1</span>&gt;<span class=EXP>EXP2</span> or 0 otherwise. This is a signed comparison.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>a constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">15</td>
<td class="all">16</td>
<td class="all">14</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>a constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">77</td>
<td class="all">87</td>
<td class="all">75</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>&ge;&ge;<span class=EXP>EXP2</span></code></td>
<td>Returns 1 if <span class=EXP>EXP1</span>&ge;<span class=EXP>EXP2</span> or 0 otherwise. This is a signed comparison.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>-32768</th>
<th>a constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">4</td>
<td class="all">3</td>
<td class="all">14</td>
<td class="all">15</td>
<td class="all">14</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>-32768</th>
<th>a constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">32</td>
<td class="all">10</td>
<td class="all">70</td>
<td class="all">80</td>
<td class="all">86</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>&lt;&lt;<span class=EXP>EXP2</span></code></td>
<td>Returns 1 if <span class=EXP>EXP1</span>&lt;<span class=EXP>EXP2</span> or 0 otherwise. This is a signed comparison.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>-32768</th>
<th>a constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">5</td>
<td class="all">3</td>
<td class="all">15</td>
<td class="all">16</td>
<td class="all">14</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>-32768</th>
<th>a constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">27</td>
<td class="all">10</td>
<td class="all">68</td>
<td class="all">78</td>
<td class="all">88</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>&le;&le;<span class=EXP>EXP2</span></code></td>
<td>Returns 1 if <span class=EXP>EXP1</span>&le;<span class=EXP>EXP2</span> or 0 otherwise. This is a signed comparison.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>a constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">15</td>
<td class="all">16</td>
<td class="all">12</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>a constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">74</td>
<td class="all">84</td>
<td class="all">81</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>*^<span class=EXP>EXP2</span></code></td>
<td>Computes the high order 16 bits of the unsigned multiplication of <span class=EXP>EXP1</span> and <span class=EXP>EXP2</span>.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>a constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">6</td>
<td class="all">7</td>
<td class="all">5</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="prgmapp" rowspan="3">22</td>
<td class="fusion" rowspan="3"></td>
<td class="all"></td>
<td class="all">~~800</td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>**<span class=EXP>EXP2</span></code></td>
<td><span class=EXP>EXP1</span> is multiplied by <span class=EXP>EXP2</span>, where both are signed 8.8 fixed point values.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0000h</th>
<th>0001h</th>
<th>0002h</th>
<th>0004h</th>
<th>0080h</th>
<th>0100h</th>
<th>0200h</th>
<th>0300h</th>
<th>0400h</th>
<th>0500h</th>
</tr>
<tr>
<td class="all">3</td>
<td class="all">5</td>
<td class="all">4</td>
<td class="all">6</td>
<td class="all">4</td>
<td class="all">0</td>
<td class="all">1</td>
<td class="all">4</td>
<td class="all">2</td>
<td class="all">5</td>
</tr>
</table>
<table class=float>
<tr>
<th>0600h</th>
<th>0700h</th>
<th>0800h</th>
<th>0900h</th>
<th>0A00h</th>
<th>0C00h</th>
<th>1000h</th>
<th>2000h</th>
<th>4000h</th>
<th>FFFFh</th>
</tr>
<tr>
<td class="all">5</td>
<td class="all">6</td>
<td class="all">3</td>
<td class="all">6</td>
<td class="all">6</td>
<td class="all">6</td>
<td class="all">4</td>
<td class="all">5</td>
<td class="all">6</td>
<td class="all">6</td>
</tr>
</table>
<table class=float>
<tr>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">6</td>
<td class="all">7</td>
<td class="all">5</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="prgmapp" rowspan="2">
<span class=info>18</span>
<div class="popup">For multiplication, not needed if <span class=EXP>EXP2</span> has a constant optimization.</div>
</td>
<td class="fusion" rowspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0000h</th>
<th>0001h</th>
<th>0002h</th>
<th>0004h</th>
<th>0080h</th>
<th>0100h</th>
<th>0200h</th>
<th>0300h</th>
<th>0400h</th>
<th>0500h</th>
</tr>
<tr>
<td class="all">10</td>
<td class="all">20</td>
<td class="all">23</td>
<td class="all">38</td>
<td class="all">16</td>
<td class="all">0</td>
<td class="all">11</td>
<td class="all">30</td>
<td class="all">22</td>
<td class="all">41</td>
</tr>
</table>
<table class=float>
<tr>
<th>0600h</th>
<th>0700h</th>
<th>0800h</th>
<th>0900h</th>
<th>0A00h</th>
<th>0C00h</th>
<th>1000h</th>
<th>2000h</th>
<th>4000h</th>
<th>FFFFh</th>
</tr>
<tr>
<td class="all">41</td>
<td class="all">52</td>
<td class="all">33</td>
<td class="all">52</td>
<td class="all">52</td>
<td class="all">52</td>
<td class="all">44</td>
<td class="all">55</td>
<td class="all">66</td>
<td class="all">24</td>
</tr>
</table>
<table class=float>
<tr>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all" colspan="3">~~900</td>  
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP</span><sup>2r</sup></code></td>
<td>The signed 8.8 fixed point value <span class=EXP>EXP</span> is multiplied by itself.</td>
<td class="all">5</td>
<td class="all">~~900</td>  
<td class="none"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>//<span class=EXP>EXP2</span></code></td>
<td><span class=EXP>EXP1</span> is divided by <span class=EXP>EXP2</span>, where both are signed values.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>64</th>
<th>128</th>
<th>256</th>
<th>512</th>
<th>16384</th>
<th>32768</th>
</tr>
<tr>
<td class="all">6</td>
<td class="all">0</td>
<td class="all">4</td>
<td class="all">6</td>
<td class="all">4</td>
<td class="all">5</td>
<td class="all">6</td>
<td class="all">6</td>
<td class="all">3</td>
</tr>
</table>
<table class=float>
<tr>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">6</td>
<td class="all">7</td>
<td class="all">6</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="prgmapp">
<span class=info>*</span>
<div class="popup">Requires the division routine (24 bytes), which requires the modulus routine (22 bytes)</div>
</td>
<td class="fusion"></td>
<td class="prgmapp">35</td>
<td class="fusion"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>64</th>
<th>128</th>
<th>256</th>
<th>512</th>
<th>16384</th>
<th>32768</th>
</tr>
<tr>
<td class="all">31</td>
<td class="all">0</td>
<td class="all">16</td>
<td class="all">38</td>
<td class="all">23</td>
<td class="all">20</td>
<td class="all">38</td>
<td class="all">38</td>
<td class="all">26</td>
</tr>
</table>
<table class=float>
<tr>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all" colspan="3">~~1100</td>  
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>/*<span class=EXP>EXP2</span></code></td>
<td><span class=EXP>EXP1</span> is divided by <span class=EXP>EXP2</span>, where both are signed 8.8 fixed point values.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0000h</th>
<th>0001h</th>
<th>0002h</th>
<th>0004h</th>
<th>0008h</th>
<th>0010h</th>
<th>0020h</th>
<th>0040h</th>
<th>0080h</th>
<th>0100h</th>
</tr>
<tr>
<td class="all">6</td>
<td class="all">3</td>
<td class="all">5</td>
<td class="all">6</td>
<td class="all">5</td>
<td class="all">4</td>
<td class="all">3</td>
<td class="all">2</td>
<td class="all">1</td>
<td class="all">0</td>
</tr>
</table>
<table class=float>
<tr>
<th>0200h</th>
<th>4000h</th>
<th>FFFFh</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">4</td>
<td class="all">6</td>
<td class="all">6</td>
<td class="all">6</td>
<td class="all">7</td>
<td class="all">6</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="prgmapp" rowspan="2">
<span class=info>*</span>
<div class="popup">Requires the modulus routine (22 bytes)</div>
</td>
<td class="fusion" rowspan="2"></td>
<td class="prgmapp">43</td>
<td class="fusion"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0000h</th>
<th>0001h</th>
<th>0002h</th>
<th>0004h</th>
<th>0008h</th>
<th>0010h</th>
<th>0020h</th>
<th>0040h</th>
<th>0080h</th>
<th>0100h</th>
</tr>
<tr>
<td class="all">41</td>
<td class="all">11</td>
<td class="all">170</td>
<td class="all">66</td>
<td class="all">55</td>
<td class="all">44</td>
<td class="all">33</td>
<td class="all">22</td>
<td class="all">11</td>
<td class="all">0</td>
</tr>
</table>
<table class=float>
<tr>
<th>0200h</th>
<th>4000h</th>
<th>FFFFh</th>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">16</td>
<td class="all">38</td>
<td class="all">24</td>
<td class="all" colspan="3">~~1400</td>  
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP</span><sup>-1</sup></code></td>
<td>Computes the reciprocal of the signed 8.8 fixed point value.</td>
<td class="all">3</td>
<td class="prgmapp">32</td>
<td class="fusion"></td>
<td class="all">~~1300</td>  
<td class="none"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>&middot;<span class=EXP>EXP2</span></code></td>
<td>Returns the bitwise AND of the 16-bit expressions. This is a plot style token.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>a constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td>
<table class=float>
<tr>
<th colspan="2" rowspan="2"></th>
<th colspan="3"><span class=EXP>EXP2</span> mod 256 is...</th>
<tr>
<th>0</th>
<th>255</th>
<th>other</th>
</tr>
<tr>
<th rowspan="3"><span class=EXP>EXP2</span>/256 is...</th>
<th>0</th>
<td class="all">4</td>
<td class="all">2</td>
<td class="all">6</td>
</tr>
<tr>
<th>255</th>
<td class="all">2</td>
<td class="all">0</td>
<td class="all">4</td>
</tr>
<tr>
<th>other</th>
<td class="all">6</td>
<td class="all">4</td>
<td class="all">8</td>
</tr>
</table>
</td>
<td class="all">10</td>
<td class="all">8</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>a constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td>
<table class=float>
<tr>
<th colspan="2" rowspan="2"></th>
<th colspan="3"><span class=EXP>EXP2</span> mod 256 is...</th>
<tr>
<th>0</th>
<th>255</th>
<th>other</th>
</tr>
<tr>
<th rowspan="3"><span class=EXP>EXP2</span>/256 is...</th>
<th>0</th>
<td class="all">14</td>
<td class="all">7</td>
<td class="all">22</td>
</tr>
<tr>
<th>255</th>
<td class="all">7</td>
<td class="all">0</td>
<td class="all">15</td>
</tr>
<tr>
<th>other</th>
<td class="all">22</td>
<td class="all">15</td>
<td class="all">30</td>
</tr>
</table>
</td>
<td class="all">44</td>
<td class="all">45</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>&#x1540;<span class=EXP>EXP2</span></code></td>
<td>Returns the bitwise OR of the 16-bit expressions. This is a plot style token.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>a constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td>
<table class=float>
<tr>
<th colspan="2" rowspan="2"></th>
<th colspan="3"><span class=EXP>EXP2</span> mod 256 is...</th>
<tr>
<th>0</th>
<th>255</th>
<th>other</th>
</tr>
<tr>
<th rowspan="3"><span class=EXP>EXP2</span>/256 is...</th>
<th>0</th>
<td class="all">0</td>
<td class="all">2</td>
<td class="all">4</td>
</tr>
<tr>
<th>255</th>
<td class="all">2</td>
<td class="all">4</td>
<td class="all">6</td>
</tr>
<tr>
<th>other</th>
<td class="all">4</td>
<td class="all">6</td>
<td class="all">8</td>
</tr>
</table>
</td>
<td class="all">10</td>
<td class="all">8</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>a constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td>
<table class=float>
<tr>
<th colspan="2" rowspan="2"></th>
<th colspan="3"><span class=EXP>EXP2</span> mod 256 is...</th>
<tr>
<th>0</th>
<th>255</th>
<th>other</th>
</tr>
<tr>
<th rowspan="3"><span class=EXP>EXP2</span>/256 is...</th>
<th>0</th>
<td class="all">0</td>
<td class="all">7</td>
<td class="all">15</td>
</tr>
<tr>
<th>255</th>
<td class="all">7</td>
<td class="all">14</td>
<td class="all">22</td>
</tr>
<tr>
<th>other</th>
<td class="all">15</td>
<td class="all">22</td>
<td class="all">30</td>
</tr>
</table>
</td>
<td class="all">44</td>
<td class="all">45</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>&#9643;<span class=EXP>EXP2</span></code></td>
<td>Returns the bitwise XOR of the 16-bit expressions. This is a plot style token.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>a constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td>
<table class=float>
<tr>
<th colspan="2" rowspan="2"></th>
<th colspan="3"><span class=EXP>EXP2</span> mod 256 is...</th>
<tr>
<th>0</th>
<th>255</th>
<th>other</th>
</tr>
<tr>
<th rowspan="3"><span class=EXP>EXP2</span>/256 is...</th>
<th>0</th>
<td class="all">0</td>
<td class="all">3</td>
<td class="all">4</td>
</tr>
<tr>
<th>255</th>
<td class="all">3</td>
<td class="all">6</td>
<td class="all">7</td>
</tr>
<tr>
<th>other</th>
<td class="all">4</td>
<td class="all">7</td>
<td class="all">8</td>
</tr>
</table>
</td>
<td class="all">10</td>
<td class="all">8</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>a constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td>
<table class=float>
<tr>
<th colspan="2" rowspan="2"></th>
<th colspan="3"><span class=EXP>EXP2</span> mod 256 is...</th>
<tr>
<th>0</th>
<th>255</th>
<th>other</th>
</tr>
<tr>
<th rowspan="3"><span class=EXP>EXP2</span>/256 is...</th>
<th>0</th>
<td class="all">0</td>
<td class="all">12</td>
<td class="all">15</td>
</tr>
<tr>
<th>255</th>
<td class="all">12</td>
<td class="all">24</td>
<td class="all">27</td>
</tr>
<tr>
<th>other</th>
<td class="all">15</td>
<td class="all">27</td>
<td class="all">30</td>
</tr>
</table>
</td>
<td class="all">44</td>
<td class="all">45</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code>not(<span class=EXP>EXP</span>)<sup>r</sup></code></td>
<td>Returns the bitwise complement of the 16-bit value.</td>
<td class="all">6</td>
<td class="all" colspan="2"></td>
<td class="all">24</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span><span class=i>e</span><span class=EXP>EXP2</span></code></td>
<td>Gets the <span class=EXP>EXP2</span>-th bit of the lower 8 bits of <span class=EXP>EXP1</span>. Unlike assembly, the leftmost bit (high order) is bit 0 and the rightmost bit (low order) is bit 7. That's the Euler's constant <code>e</code>.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
</tr>
<tr>
<td class="all">5</td>
<td class="all">6</td>
<td class="all">7</td>
<td class="all">7</td>
<td class="all">7</td>
<td class="all">7</td>
<td class="all">7</td>
<td class="all">5</td>
</tr>
</table>
<table class=float>
<tr>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">15</td>
<td class="all">16</td>
<td class="all">15</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
</tr>
<tr>
<td class="all">27</td>
<td class="all">38</td>
<td class="all">37</td>
<td class="all">37</td>
<td class="all">37</td>
<td class="all">37</td>
<td class="all">26</td>
<td class="all">20</td>
</tr>
</table>
<table class=float>
<tr>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">28*(<span class=EXP>EXP2</span>%8+1) + 36</td>
<td class="all">28*(<span class=EXP>EXP2</span>%8+1) + 46</td>
<td class="all">28*(<span class=EXP>EXP2</span>%8+1) + 51</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span><span class=i>ee</span><span class=EXP>EXP2</span></code></td>
<td>Gets the <span class=EXP>EXP2</span>-th bit of the 16-bit value <span class=EXP>EXP1</span>. Unlike assembly, the leftmost bit (high order) is bit 0 and the rightmost bit (low order) is bit 15. That's the Euler's constant <code>e</code>.</td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
</tr>
<tr>
<td class="all">5</td>
<td class="all">6</td>
<td class="all">7</td>
<td class="all">7</td>
<td class="all">7</td>
<td class="all">7</td>
<td class="all">7</td>
<td class="all">6</td>
</tr>
</table>
<table class=float>
<tr>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
<th>12</th>
<th>13</th>
<th>14</th>
<th>15</th>
</tr>
<tr>
<td class="all">5</td>
<td class="all">6</td>
<td class="all">7</td>
<td class="all">7</td>
<td class="all">7</td>
<td class="all">7</td>
<td class="all">7</td>
<td class="all">5</td>
</tr>
</table>
<table class=float>
<tr>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">15</td>
<td class="all">16</td>
<td class="all">15</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>*</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP2</span> is...</th>
</tr>
<tr><td><table class=float>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
</tr>
<tr>
<td class="all">27</td>
<td class="all">38</td>
<td class="all">37</td>
<td class="all">37</td>
<td class="all">37</td>
<td class="all">37</td>
<td class="all">26</td>
<td class="all">22</td>
</tr>
</table>
<table class=float>
<tr>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
<th>12</th>
<th>13</th>
<th>14</th>
<th>15</th>
</tr>
<tr>
<td class="all">27</td>
<td class="all">38</td>
<td class="all">37</td>
<td class="all">37</td>
<td class="all">37</td>
<td class="all">37</td>
<td class="all">26</td>
<td class="all">20</td>
</tr>
</table>
<table class=float>
<tr>
<th>any other constant</th>
<th>a variable</th>
<th>an expression</th>
</tr>
<tr>
<td class="all">24*(<span class=EXP>EXP2</span>%16+1) + 40</td>
<td class="all">24*(<span class=EXP>EXP2</span>%16+1) + 50</td>
<td class="all">24*(<span class=EXP>EXP2</span>%16+1) + 55</td>
</tr>
</table></td></tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code>e^(<span class=EXP>EXP</span>)</code></td>
<td>Returns 2 to the power of the expression (modular).</td>
<td class="all">10</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>28*<span class=EXP>EXP</span>+45</span>
<div class="popup">28*(<span class=EXP>EXP</span>%256+1) + 17</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code>ln(<span class=EXP>EXP</span>)</code></td>
<td>Returns the base 2 logarithm of the expression, or <code>-1</code> if undefined.</td>
<td class="all">10</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>~319</span>
<div class="popup">34*(16-<span class=EXP>result</span>) + 13</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code>abs(<span class=EXP>EXP</span>)</code></td>
<td>Returns the absolute value of the expression.</td>
<td class="all">10</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>~29</span>
<div class="popup">
<table>
<tr>
<th><span class=EXP>EXP</span> is nonnegative</th>
<th><span class=EXP>EXP</span> is negative</th>
</tr>
<tr>
<td class="all">20</td>
<td class="all">39</td>
</tr>
</table>
</div>
</td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td><code>&radic;(<span class=EXP>EXP</span>)<sup>r</sup></code></td>
<td>Returns the square root of the 8.8 fixed point expression.</td>
<td class="all">3</td>
<td class="prgmapp" colspan="2">38</td>
<td class="fusion" colspan="2"></td>
<td class="prgmapp">
<span class=info>~1637</span>
<div class="popup">-13*<span class=EXP>num_bits_set_result</span> + 1715</div>
</td>
<td class="fusion">
<span class=info>~1647</span>
<div class="popup">-13*<span class=EXP>num_bits_set_result</span> + 1725</div>
</td>
</tr>
<tr>
<td><code>Select(<span class=EXP>EXP1</span>,<span class=EXP>EXP2</span>)</code></td>
<td>Returns <span class=EXP>EXP1</span>, saving its value while <span class=EXP>EXP2</span> is evaluated.</td>
<td class="all">2</td>
<td class="all" colspan="2"></td>
<td class="all">21</td>
<td class="none" colspan="3"></td>
</tr>
</table>
<table id=drawingCommands class=commandTable>
<caption>Drawing</caption>
<tr>
<th rowspan="2">Command</th>
<th rowspan="2">Description</th>
<th class="all" colspan="3">Size (bytes)</th>
<th class="all" rowspan="2">Speed<br/>(cycles)</th>
<td class="none" colspan="6"></td>
</tr>
<tr>
<th class="all">
<span class=info>Each Use</span>
<div class="popup"><span class=info>For commands that list special information given an argument is a constant or variable, treat the size of the argument as 0 bytes, unless otherwise stated.</span></div>
</th>
<th class="all" colspan="2">Once</th>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td>
<code>Pxl-On(<span class=X>X</span>,<span class=Y>Y</span>)</code><br/>
<code>Pxl-On(<span class=X>X</span>,<span class=Y>Y</span>)<sup>r</sup></code><br/>
<code>Pxl-On(<span class=X>X</span>,<span class=Y>Y</span>,<span class=BUF>BUF</span>)</code>
</td>
<td>The pixel at (<span class=X>X</span>,<span class=Y>Y</span>) becomes black on the main buffer, back buffer, or specified buffer respectively.</td>
<td class="all">6<br/>9<br/>9</td>
<td class="prgmapp" colspan="2" rowspan="4">42</td>
<td class="fusion" colspan="2" rowspan="4"></td>
<td class="prgmapp">
<span class=info>~304<br/>~304<br/>~319</span>
<div class="popup">
<span class=info>Info reflects two-argument versions</span><br/>
<br/>
<table>
<tr>
<th>Offscreen horizontally</th>
<th colspan="2">Offscreen vertically</th>
<th rowspan="2">Onscreen</th>
</tr>
<tr>
<th><span class=X>X</span>%256&ge;96</th>
<th><span class=X>Y</span>%256&ge;128</th>
<th><span class=X>Y</span>%256&ge;64</th>
</tr>
<tr>
<td class="prgmapp">116</td>
<td class="prgmapp">129</td>
<td class="prgmapp">142</td>
<td class="prgmapp">17*(<span class=X>X</span>%8) - <span class=BOOL>x_mod_8_equals_0</span> + 244</td>
</tr>
</table>
</div>
</td>
<td class="fusion">
<span class=info>~314<br/>~314<br/>~329</span>
<div class="popup">
<table>
<tr>
<th>Offscreen horizontally</th>
<th colspan="2">Offscreen vertically</th>
<th rowspan="2">Onscreen</th>
</tr>
<tr>
<th><span class=X>X</span>%256&ge;96</th>
<th><span class=X>Y</span>%256&ge;128</th>
<th><span class=X>Y</span>%256&ge;64</th>
</tr>
<tr>
<td class="fusion">126</td>
<td class="fusion">139</td>
<td class="fusion">152</td>
<td class="fusion">17*(<span class=X>X</span>%8) - <span class=BOOL>x_mod_8_equals_0</span> + 254</td>
</tr>
</table>
</div>
</td>
</tr>
<tr>
<td>
<code>Pxl-Off(<span class=X>X</span>,<span class=Y>Y</span>)</code><br/>
<code>Pxl-Off(<span class=X>X</span>,<span class=Y>Y</span>)<sup>r</sup></code><br/>
<code>Pxl-Off(<span class=X>X</span>,<span class=Y>Y</span>,<span class=BUF>BUF</span>)</code>
</td>
<td>The pixel at (<span class=X>X</span>,<span class=Y>Y</span>) becomes white on the main buffer, back buffer, or specified buffer respectively.</td>
<td class="all">7<br/>10<br>10</td>
<td class="prgmapp">
<span class=info>~308<br/>~308<br/>~323</span>
<div class="popup">
<span class=info>Info reflects two-argument versions</span><br/>
<br/>
<table>
<tr>
<th>Offscreen horizontally</th>
<th colspan="2">Offscreen vertically</th>
<th rowspan="2">Onscreen</th>
</tr>
<tr>
<th><span class=X>X</span>%256&ge;96</th>
<th><span class=X>Y</span>%256&ge;128</th>
<th><span class=X>Y</span>%256&ge;64</th>
</tr>
<tr>
<td class="prgmapp">120</td>
<td class="prgmapp">133</td>
<td class="prgmapp">146</td>
<td class="prgmapp">17*(<span class=X>X</span>%8) - <span class=BOOL>x_mod_8_equals_0</span> + 248</td>
</tr>
</table>
</div>
</td>
<td class="fusion">
<span class=info>~318<br/>~318<br/>~333</span>
<div class="popup">
<table>
<tr>
<th>Offscreen horizontally</th>
<th colspan="2">Offscreen vertically</th>
<th rowspan="2">Onscreen</th>
</tr>
<tr>
<th><span class=X>X</span>%256&ge;96</th>
<th><span class=X>Y</span>%256&ge;128</th>
<th><span class=X>Y</span>%256&ge;64</th>
</tr>
<tr>
<td class="fusion">130</td>
<td class="fusion">143</td>
<td class="fusion">156</td>
<td class="fusion">17*(<span class=X>X</span>%8) - <span class=BOOL>x_mod_8_equals_0</span> + 258</td>
</tr>
</table>
</div>
</td>
</tr>
<tr>
<td>
<code>Pxl-Change(<span class=X>X</span>,<span class=Y>Y</span>)</code><br/>
<code>Pxl-Change(<span class=X>X</span>,<span class=Y>Y</span>)<sup>r</sup></code><br/>
<code>Pxl-Change(<span class=X>X</span>,<span class=Y>Y</span>,<span class=BUF>BUF</span>)</code>
</td>
<td>The pixel at (<span class=X>X</span>,<span class=Y>Y</span>) inverts color on the main buffer, back buffer, or specified buffer respectively.</td>
<td class="all">6<br/>9<br/>9</td>
<td class="prgmapp">
<span class=info>~304<br/>~304<br/>~319</span>
<div class="popup">
<span class=info>Info reflects two-argument versions</span><br/>
<br/>
<table>
<tr>
<th>Offscreen horizontally</th>
<th colspan="2">Offscreen vertically</th>
<th rowspan="2">Onscreen</th>
</tr>
<tr>
<th><span class=X>X</span>%256&ge;96</th>
<th><span class=X>Y</span>%256&ge;128</th>
<th><span class=X>Y</span>%256&ge;64</th>
</tr>
<tr>
<td class="prgmapp">116</td>
<td class="prgmapp">129</td>
<td class="prgmapp">142</td>
<td class="prgmapp">17*(<span class=X>X</span>%8) - <span class=BOOL>x_mod_8_equals_0</span> + 244</td>
</tr>
</table>
</div>
</td>
<td class="fusion">
<span class=info>~314<br/>~314<br/>~329</span>
<div class="popup">
<table>
<tr>
<th>Offscreen horizontally</th>
<th colspan="2">Offscreen vertically</th>
<th rowspan="2">Onscreen</th>
</tr>
<tr>
<th><span class=X>X</span>%256&ge;96</th>
<th><span class=X>Y</span>%256&ge;128</th>
<th><span class=X>Y</span>%256&ge;64</th>
</tr>
<tr>
<td class="fusion">126</td>
<td class="fusion">139</td>
<td class="fusion">152</td>
<td class="fusion">17*(<span class=X>X</span>%8) - <span class=BOOL>x_mod_8_equals_0</span> + 254</td>
</tr>
</table>
</div>
</td>
</tr>
<tr>
<td>
<code>pxl-Test(<span class=X>X</span>,<span class=Y>Y</span>)</code><br/>
<code>pxl-Test(<span class=X>X</span>,<span class=Y>Y</span>)<sup>r</sup></code><br/>
<code>pxl-Test(<span class=X>X</span>,<span class=Y>Y</span>,<span class=BUF>BUF</span>)</code>
</td>
<td>Returns 1 if pixel is black and 0 if pixel is white at (<span class=X>X</span>,<span class=Y>Y</span>) on the main buffer, back buffer, or specified buffer respectively.</td>
<td class="all">10<br/>13<br/>13</td>
<td class="prgmapp">
<span class=info>~317<br/>~317<br/>~332</span>
<div class="popup">
<span class=info>Info reflects two-argument versions</span><br/>
<br/>
<table>
<tr>
<th rowspan="2"></th>
<th>Offscreen horizontally</th>
<th colspan="2">Offscreen vertically</th>
<th rowspan="2">Onscreen</th>
</tr>
<tr>
<th><span class=X>X</span>%256&ge;96</th>
<th><span class=X>Y</span>%256&ge;128</th>
<th><span class=X>Y</span>%256&ge;64</th>
</tr>
<tr>
<th>Pixel is on</th>
<td class="prgmapp" rowspan="2">128</td>
<td class="prgmapp" rowspan="2">141</td>
<td class="prgmapp" rowspan="2">154</td>
<td class="prgmapp">17*(<span class=X>X</span>%8) - <span class=BOOL>x_mod_8_equals_0</span> + 256</td>
</tr>
<tr>
<th>Pixel is off</th>
<td class="prgmapp">17*(<span class=X>X</span>%8) - <span class=BOOL>x_mod_8_equals_0</span> + 257</td>
</tr>
</table>
</div>
</td>
<td class="fusion">
<span class=info>~327<br/>~327<br/>~342</span>
<div class="popup">
<table>
<tr>
<th rowspan="2"></th>
<th>Offscreen horizontally</th>
<th colspan="2">Offscreen vertically</th>
<th rowspan="2">Onscreen</th>
</tr>
<tr>
<th><span class=X>X</span>%256&ge;96</th>
<th><span class=X>Y</span>%256&ge;128</th>
<th><span class=X>Y</span>%256&ge;64</th>
</tr>
<tr>
<th>Pixel is on</th>
<td class="fusion" rowspan="2">138</td>
<td class="fusion" rowspan="2">151</td>
<td class="fusion" rowspan="2">164</td>
<td class="fusion">17*(<span class=X>X</span>%8) - <span class=BOOL>x_mod_8_equals_0</span> + 266</td>
</tr>
<tr>
<th>Pixel is off</th>
<td class="fusion">17*(<span class=X>X</span>%8) - <span class=BOOL>x_mod_8_equals_0</span> + 267</td>
</tr>
</table>
</div>
</td>
</tr>
<tr>
<td>
<code><span class=DRAWMODE>[WI]</span>HLine(<span class=Y>Y</span>)</code><br/>
<code><span class=DRAWMODE>[WI]</span>HLine(<span class=Y>Y</span>)<sup>r</sup></code><br/>
<code><span class=DRAWMODE>[WI]</span>HLine(<span class=Y>Y</span>,<span class=BUF>BUF</span>)</code><br/>
<code><span class=DRAWMODE>[WI]</span>HLine(<span class=Y>Y</span>,<span class=X>X1</span>,<span class=X>X2</span>)</code><br/>
<code><span class=DRAWMODE>[WI]</span>HLine(<span class=Y>Y</span>,<span class=X>X1</span>,<span class=X>X2</span>)<sup>r</sup></code><br/>
<code><span class=DRAWMODE>[WI]</span>HLine(<span class=Y>Y</span>,<span class=X>X1</span>,<span class=X>X2</span>,<span class=BUF>BUF</span>)</code>
</td>
<td>Draws a black, white, or inverted horizontal line from <span class=X>X1</span> to <span class=X>X2</span> (0 to 95 if unspecified) at the given <span class=Y>Y</span> coordinate on the main buffer, back buffer, or specified buffer respectively.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td>
<code><span class=DRAWMODE>[WI]</span>VLine(<span class=X>X</span>)</code><br/>
<code><span class=DRAWMODE>[WI]</span>VLine(<span class=X>X</span>)<sup>r</sup></code><br/>
<code><span class=DRAWMODE>[WI]</span>VLine(<span class=X>X</span>,<span class=BUF>BUF</span>)</code><br/>
<code><span class=DRAWMODE>[WI]</span>VLine(<span class=X>X</span>,<span class=Y>Y1</span>,<span class=Y>Y2</span>)</code><br/>
<code><span class=DRAWMODE>[WI]</span>VLine(<span class=X>X</span>,<span class=Y>Y1</span>,<span class=Y>Y2</span>)<sup>r</sup></code><br/>
<code><span class=DRAWMODE>[WI]</span>VLine(<span class=X>X</span>,<span class=Y>Y1</span>,<span class=Y>Y2</span>,<span class=BUF>BUF</span>)</code>
</td>
<td>Draws a black, white, or inverted vorizontal line from <span class=Y>Y1</span> to <span class=Y>Y2</span> (0 to 95 if unspecified) at the given <span class=X>X</span> coordinate on the main buffer, back buffer, or specified buffer respectively.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td>
<code><span class=DRAWMODE>[WI]</span>Line(<span class=X>X1</span>,<span class=Y>Y1</span>,<span class=X>X2</span>,<span class=Y>Y2</span>)</code><br/>
<code><span class=DRAWMODE>[WI]</span>Line(<span class=X>X1</span>,<span class=Y>Y1</span>,<span class=X>X2</span>,<span class=Y>Y2</span>)<sup>r</sup></code><br/>
<code><span class=DRAWMODE>[WI]</span>Line(<span class=X>X1</span>,<span class=Y>Y1</span>,<span class=X>X2</span>,<span class=Y>Y2</span>,<span class=BUF>BUF</span>)</code>
</td>
<td>Draws a black, white, or inverted line from point (<span class=X>X1</span>,<span class=Y>Y1</span>) to (<span class=X>X2</span>,<span class=Y>Y2</span>) on the main buffer, back buffer, or specified buffer respectively.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td>
<code><span class=DRAWMODE>[WI]</span>Rect(<span class=X>X</span>,<span class=Y>Y</span>,<span class=W>W</span>,<span class=H>H</span>)</code><br/>
<code><span class=DRAWMODE>[WI]</span>Rect(<span class=X>X</span>,<span class=Y>Y</span>,<span class=W>W</span>,<span class=H>H</span>)<sup>r</sup></code><br/>
<code><span class=DRAWMODE>[WI]</span>Rect(<span class=X>X</span>,<span class=Y>Y</span>,<span class=W>W</span>,<span class=H>H</span>,<span class=BUF>BUF</span>)</code>
<span class=keyReplacement>ref()</span>
</td>
<td>Draws a filled black, white, or inverted rectangle with its upper left corner at (<span class=X>X</span>,<span class=Y>Y</span>), a width of <span class=W>W</span>, and a height of <span class=H>H</span> on the main buffer, back buffer, or specified buffer respectively.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td>
<code>RectI(<span class=X>X</span>,<span class=Y>Y</span>,<span class=W>W</span>,<span class=H>H</span>)</code><br/>
<code>RectI(<span class=X>X</span>,<span class=Y>Y</span>,<span class=W>W</span>,<span class=H>H</span>)<sup>r</sup></code><br/>
<code>RectI(<span class=X>X</span>,<span class=Y>Y</span>,<span class=W>W</span>,<span class=H>H</span>,<span class=BUF>BUF</span>)</code>
<span class=keyReplacement>rref()</span>
</td>
<td>Draws a filled inverted rectangle with its upper left corner at (<span class=X>X</span>,<span class=Y>Y</span>), a width of <span class=W>W</span>, and a height of <span class=H>H</span> on the main buffer, back buffer, or specified buffer respectively.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="3"></td>
</tr>
<tr>
<td>
<code><span class=DRAWMODE>[WI]</span>Circle(<span class=X>X</span>,<span class=Y>Y</span>,<span class=R>R</span>)</code><br/>
<code><span class=DRAWMODE>[WI]</span>Circle(<span class=X>X</span>,<span class=Y>Y</span>,<span class=R>R</span>)<sup>r</sup></code><br/>
<code><span class=DRAWMODE>[WI]</span>Circle(<span class=X>X</span>,<span class=Y>Y</span>,<span class=R>R</span>,<span class=BUF>BUF</span>)</code><br/>
</td>
<td>Draws a black, white, or inverted circle centered at (<span class=X>X</span>,<span class=Y>Y</span>) and with a radius of <span class=R>R</span> on the main buffer, back buffer, or specified buffer respectively.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="3"></td>
</tr>
</table>
<table id=spritesCommands class=commandTable>
<caption>Sprites</caption>
<tr>
<th rowspan="2">Command</th>
<th rowspan="2">Description</th>
<th class="all" colspan="3">Size (bytes)</th>
<th class="all" rowspan="2">Speed<br/>(cycles)</th>
<td class="none" colspan="3"></td>
</tr>
<tr>
<th class="all">
<span class=info>Each Use</span>
<div class="popup"><span class=info>For commands that list special information given an argument is a constant or variable, treat the size of the argument as 0 bytes, unless otherwise stated.</span></div>
</th>
<th class="all" colspan="2">Once</th>
</tr>
<tr>
<td>
<code>Pt-On(<span class=X>X</span>,<span class=Y>Y</span>,<span class=PIC>PIC</span>)</code><br/>
<code>Pt-On(<span class=X>X</span>,<span class=Y>Y</span>,<span class=PIC>PIC</span>)<sup>r</sup></code><br/>
<code>Pt-On(<span class=X>X</span>,<span class=Y>Y</span>,<span class=PIC>PIC</span>,<span class=BUF>BUF</span>)</code>
</td>
<td>The 8x8 sprite pointed to is drawn using OR logic at (<span class=X>X</span>,<span class=Y>Y</span>) to the main buffer, back buffer, or specified buffer respectively.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>Pt-Off(<span class=X>X</span>,<span class=Y>Y</span>,<span class=PIC>PIC</span>)</code><br/>
<code>Pt-Off(<span class=X>X</span>,<span class=Y>Y</span>,<span class=PIC>PIC</span>)<sup>r</sup></code><br/>
<code>Pt-Off(<span class=X>X</span>,<span class=Y>Y</span>,<span class=PIC>PIC</span>,<span class=BUF>BUF</span>)</code>
</td>
<td>The 8x8 sprite pointed to is drawn using overwrite logic at (<span class=X>X</span>,<span class=Y>Y</span>) to the main buffer, back buffer, or specified buffer respectively.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>Pt-Change(<span class=X>X</span>,<span class=Y>Y</span>,<span class=PIC>PIC</span>)</code><br/>
<code>Pt-Change(<span class=X>X</span>,<span class=Y>Y</span>,<span class=PIC>PIC</span>)<sup>r</sup></code><br/>
<code>Pt-Change(<span class=X>X</span>,<span class=Y>Y</span>,<span class=PIC>PIC</span>,<span class=BUF>BUF</span>)</code>
</td>
<td>The 8x8 sprite pointed to is drawn using XOR logic at (<span class=X>X</span>,<span class=Y>Y</span>) to the main buffer, back buffer, or specified buffer respectively.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>Pt-And(<span class=X>X</span>,<span class=Y>Y</span>,<span class=PIC>PIC</span>)</code><br/>
<code>Pt-And(<span class=X>X</span>,<span class=Y>Y</span>,<span class=PIC>PIC</span>)<sup>r</sup></code><br/>
<code>Pt-And(<span class=X>X</span>,<span class=Y>Y</span>,<span class=PIC>PIC</span>,<span class=BUF>BUF</span>)</code>
<span class=keyReplacement>Plot3()</span>
</td>
<td>The 8x8 sprite pointed to is drawn using AND logic at (<span class=X>X</span>,<span class=Y>Y</span>) to the main buffer, back buffer, or specified buffer respectively.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>pt-Get(<span class=X>X</span>,<span class=Y>Y</span>)</code><br/>
<code>pt-Get(<span class=X>X</span>,<span class=Y>Y</span>)<sup>r</sup></code><br/>
<code>pt-Get(<span class=X>X</span>,<span class=Y>Y</span>,<span class=BUF>BUF</span>)</code><br/>
<code>pt-Get(<span class=X>X</span>,<span class=Y>Y</span>,<span class=BUF>BUF</span>,<span class=TEMP>TEMP</span>)</code>
<span class=keyReplacement>Plot2()</span>
</td>
<td>Returns a temporary pointer to a copy of the 8x8 sprite at (<span class=X>X</span>,<span class=Y>Y</span>) on the main buffer, back buffer, or specified buffer respectively. The copy will be placed at <span class=TEMP>TEMP</span> if specified.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>Pt-Mask(<span class=X>X</span>,<span class=Y>Y</span>,<span class=PIC>PIC</span>)</code>
<span class=keyReplacement>Plot1()</span>
</td>
<td>The 8x8 grayscale sprite (2 layers) pointed to is drawn to both buffers at (<span class=X>X</span>,<span class=Y>Y</span>). Areas clear on both layers are transparent and the other combinations are 3-level grayscale.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>Pt-Mask(<span class=X>X</span>,<span class=Y>Y</span>,<span class=PIC>PIC</span>)<sup>r</sup></code><br/>
<code>Pt-Mask(<span class=X>X</span>,<span class=Y>Y</span>,<span class=PIC>PIC</span>,<span class=BUF>BUF</span>)<sup>r</sup></code>
<span class=keyReplacement>Plot1()</span>
</td>
<td>The 8x8 masked sprite (2 layers) pointed to is drawn to the main buffer or specified buffer at (<span class=X>X</span>,<span class=Y>Y</span>). Areas clear on both layers are transparent and the other combinations are white, invert, and black.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>Bitmap(<span class=X>X</span>,<span class=Y>Y</span>,<span class=BMP>BMP</span>)</code><br/>
<code>Bitmap(<span class=X>X</span>,<span class=Y>Y</span>,<span class=BMP>BMP</span>)<sup>r</sup></code><br/>
<code>Bitmap(<span class=X>X</span>,<span class=Y>Y</span>,<span class=BMP>BMP</span>,<span class=BUF>BUF</span>)</code><br/>
<code>Bitmap(<span class=X>X</span>,<span class=Y>Y</span>,<span class=BMP>BMP</span>,<span class=BUF>BUF</span>,<span class=MODE>MODE</span>)</code>
<span class=keyReplacement>Tangent()</span>
</td>
<td>Draws a bitmap to (<span class=X>X</span>,<span class=Y>Y</span>) on the main buffer, back buffer, or specified buffer respectively. The bitmap data should have in order: width (1 byte), then height (1 byte), then the rows of the image padded with zeros to the nearest byte. Mode 0 is "Pt-On" logic and Mode 1 is "Pt-Change" logic. Mode 0 is used if unspecified.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>rotC(<span class=PIC>PIC</span>)</code>
<span class=keyReplacement>ShadeNorm()</span>
</td>
<td>A copy of the 8x8 sprite pointed to is rotated clockwise 90 degrees. Returns a pointer to that new rotated sprite. Cannot be used recursively.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>rotCC(<span class=PIC>PIC</span>)</code>
<span class=keyReplacement>Shade_t()</span>
</td>
<td>A copy of the 8x8 sprite pointed to is rotated counter-clockwise 90 degrees. Returns a pointer to that new rotated sprite. Cannot be used recursively.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>flipV(<span class=PIC>PIC</span>)</code>
<span class=keyReplacement>ShadeX2()</span>
</td>
<td>A copy of the 8x8 sprite pointed to is flipped vertically. Returns a pointer to that new flipped sprite. Cannot be used recursively.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>flipH(<span class=PIC>PIC</span>)</code>
<span class=keyReplacement>ShadeF()</span>
</td>
<td>A copy of the 8x8 sprite pointed to is flipped horizontally. Returns a pointer to that new flipped sprite.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
</table>
<table id=textCommands class=commandTable>
<caption>Text</caption>
<tr>
<th rowspan="2">Command</th>
<th rowspan="2">Description</th>
<th class="all" colspan="3">Size (bytes)</th>
<th class="all" rowspan="2">Speed<br/>(cycles)</th>
<td class="none" colspan="3"></td>
</tr>
<tr>
<th class="all">
<span class=info>Each Use</span>
<div class="popup"><span class=info>For commands that list special information given an argument is a constant or variable, treat the size of the argument as 0 bytes, unless otherwise stated.</span></div>
</th>
<th class="all" colspan="2">Once</th>
</tr>
<tr>
<td><code>ClrHome</code></td>
<td>Erases the screen and text shadow and moves the cursor to the upper left corner.</td>
<td class="all">6</td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>Disp <span class=PTR>PTR</span></code></td>
<td>The string that is pointed to is displayed at the cursor position. The cursor moves with the string. If it reaches the end of the screen, it will loop around to the next line.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>Disp <span class=EXP>EXP</span>&#9654;Dec</code></td>
<td>The number is displayed as a decimal at the cursor position. The cursor is then advanced 5 spaces.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>Disp <span class=EXP>EXP</span>&#9654;Char</code>
<span class=keyReplacement>&#9654;Frac</span>
</td>
<td>The ASCII character is displayed at the cursor position. The cursor is advanced 1 space. A new line is added if it hits the edge.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>Disp <span class=EXP>EXP</span>&#9654;Tok</code>
<span class=keyReplacement>&#9654;DMS</span>
</td>
<td>The 1- or 2-byte token pointed to is displayed at the cursor position. The cursor is advanced. A new line is added if it hits the edge.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>Disp <span class=i>i</span></code></td>
<td>The cursor moves to the next line down. This is the imaginary, not lowercase 'i'.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>Output(<span class=X>X</span>)</code></td>
<td>The cursor moves to the cursor position (<span class=X>X</span>/256,<span class=X>X</span>%256).</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>Output(<span class=X>X</span>,<span class=Y>Y</span>)</code></td>
<td>The cursor moves to the cursor position (<span class=X>X</span>,<span class=Y>Y</span>).</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>Output(<span class=X>X</span>,<span class=Y>Y</span>,...)</code></td>
<td>The cursor moves to the cursor position (<span class=X>X</span>,<span class=Y>Y</span>) and whatever follows is displayed at that position.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>Text <span class=EXP>EXP</span></code></td>
<td>The text pointed to is drawn at the current pen location. See <code>Fix</code> command for drawing details.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>Text <span class=EXP>EXP</span>&#9654;Dec</code></td>
<td>The number is drawn as a decimal at the current pen location. See <code>Fix</code> command for drawing details.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>Text <span class=EXP>EXP</span>&#9654;Char</code>
<span class=keyReplacement>&#9654;Frac</span>
</td>
<td>The ASCII character is drawn at the current pen location. See <code>Fix</code> command for drawing details.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>Text <span class=PTR>PTR</span>&#9654;Tok</code>
<span class=keyReplacement>&#9654;DMS</span>
</td>
<td>The 1- or 2-byte token pointed to is drawn at the current pen location. See <code>Fix</code> command for drawing details.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>Text(<span class=X>X</span>)</code></td>
<td>The text pen moves to the position (<span class=X>X</span>%256,<span class=X>X</span>/256).</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>Text(<span class=X>X</span>,<span class=Y>Y</span>)</code></td>
<td>The text pen moves to the position (<span class=X>X</span>,<span class=Y>Y</span>).</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>Text(<span class=X>X</span>,<span class=Y>Y</span>,...)</code></td>
<td>The text pen moves to the position (<span class=X>X</span>,<span class=Y>Y</span>). Whatever comes next becomes the <code>Text</code> command.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code><span class=EXP>EXP</span>&#9654;Hex</code>
<span class=keyReplacement>&#9654;Rect</span>
</td>
<td>Converts the number to hexadecimal and returns the pointer to that string.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>Fix 0</code></td>
<td>Small size font. Calculator should exit in this mode if changed!</td>
<td class="all" rowspan="10">4</td>
<td class="all" colspan="2" rowspan="10"></td>
<td class="all" rowspan="10">23</td>
</tr>
<tr><td><code>Fix 1</code></td><td>Large size font.</td></tr>
<tr><td><code>Fix 2</code></td><td>Normal colored font. Calculator should exit in this mode if changed!</td></tr>
<tr><td><code>Fix 3</code></td><td>Inverted font.</td></tr>
<tr><td><code>Fix 4</code></td><td>Text is drawn directly to the screen. Calculator should exit in this mode if changed!</td></tr>
<tr><td><code>Fix 5</code></td><td>Text is drawn to the buffer.</td></tr>
<tr><td><code>Fix 6</code></td><td>Automatic scrolling on last line of display. Calculator should exit in this mode if changed!</td></tr>
<tr><td><code>Fix 7</code></td><td>No scrolling on last line of display</td></tr>
<tr><td><code>Fix 8</code></td><td>Lowercase alpha is turned off.</td></tr>
<tr><td><code>Fix 9</code></td><td>Lowercase alpha is turned on.</td></tr>
<tr>
<td><code>input</code></td>
<td>Prompts for an input string just like BASIC then returns a pointer to the string structure. Don't forget, its a string of tokens, not characters.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
</table>
<table id=dataAndStorageCommands class=commandTable>
<caption>Data and Storage</caption>
<tr>
<th rowspan="2">Command</th>
<th rowspan="2">Description</th>
<th class="all" colspan="3">Size (bytes)</th>
<th class="all" rowspan="2">Speed<br/>(cycles)</th>
<td class="none" colspan="3"></td>
</tr>
<tr>
<th class="all">
<span class=info>Each Use</span>
<div class="popup"><span class=info>For commands that list special information given an argument is a constant or variable, treat the size of the argument as 0 bytes, unless otherwise stated.</span></div>
</th>
<th class="all" colspan="2">Once</th>
</tr>
<tr>
<td><code>"<span class=STR>STRING</span>"</code></td>
<td>Adds the string to program memory, but without the ending character.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>[<span class=HEX>HEX</span>]</code></td>
<td>Adds the hex to the program memory.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>[<span class=VAR>OSVAR</span>]</code></td>
<td>Absorbs the picture, appvar, program, or string from the calculator into the program. Only the source needs the var, not the executable.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>[<span class=VAR>PICVAR</span><sup>r</sup>]</code></td>
<td>Absorbs the tile map picture from the calculator into the program. 12 tiles across, moving down. Only the source needs the pic, not the executable.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>Data(<span class=CONST>CONST</span>,...)</code>
<span class=keyReplacement>&Delta;List()</span>
</td>
<td>Adds the bytes to program memory. Numbers ending with <sup>r</sup> are added as 2 byte numbers.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>Buff(<span class=SIZE>SIZE</span>)</code><br/>
<code>Buff(<span class=SIZE>SIZE</span>,<span class=CONST>CONST</span>)</code>
<span class=keyReplacement>det()</span>
</td>
<td>Creates a buffer that is size bytes large, filled with the byte constant, or with zero if unspecified.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code><span class=DATA>DATA</span>&rarr;<span class=NAME>NAME</span></code></td>
<td>Saves the data's pointer to the static variable. Also terminates current string if applicable.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code><span class=CONST>CONST</span>&rarr;<span class=NAME>NAME</span></code></td>
<td>Saves the constant's value to the static variable.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code><span class=CONST>CONST</span>&rarr;&rarr;<span class=NAME>NAME</span></code></td>
<td>Saves the constant's value to the static variable only if it hasn't already been defined. Ignored otherwise.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code><span class=NAME>NAME</span></code></td>
<td>Returns a pointer to the start of the data.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><i>See below</i></td>
<td>The list tokens point to "safe" areas of memory you are free to use.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code><span class=VAR>L<sub>1</sub></span></code></td>
<td>768 bytes (<code>saveSScreen</code>) Volatility: <span class=LOW>LOW</span></td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code><span class=VAR>L<sub>2</sub></span></code></td>
<td>531 bytes (<code>statVars</code>) Volatility: <span class=LOW>LOW</span> (Some shells, including MirageOS, use this for custom interrupt and other data; it is advised to use <code>LnReg</code> or set up a custom Axe interrupt with <code>fnInt()</code> before using this area)</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code><span class=VAR>L<sub>3</sub></span></code></td>
<td>768 bytes (<code>appBackUpScreen</code>) Volatility: <span class=MED>MED</span> (Saving to back-buffer will corrupt)</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code><span class=VAR>L<sub>4</sub></span></code></td>
<td>256 bytes (<code>tempSwapArea</code>) Volatility: <span class=MED>MED</span> (Corrupt after archiving/unarchiving anything)</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code><span class=VAR>L<sub>5</sub></span></code></td>
<td>128 bytes (<code>textShadow</code>) Volatility: <span class=MED>MED</span> ("Disp","Output", and "ClrHome" will corrupt)</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code><span class=VAR>L<sub>6</sub></span></code></td>
<td>768 bytes (<code>plotSScreen</code>) Volatility: <span class=HIGH>HIGH</span> (Any buffer drawing will corrupt)</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>{<span class=EXP>EXP</span>}</code></td>
<td>Returns the single byte the expression points to. It will be in the range 0 to 255.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>{<span class=EXP>EXP</span>}<sup>r</sup></code></td>
<td>Returns the two-byte value the expression points to.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>{<span class=EXP>EXP</span>}<sup>rr</sup></code></td>
<td>Returns the big-endian two-byte value the expression points to but in reverse order.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>&rarr;{<span class=EXP>EXP2</span>}</code></td>
<td>The single byte of <span class=EXP>EXP1</span> is stored to where <span class=EXP>EXP2</span> points.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>&rarr;{<span class=EXP>EXP2</span>}<sup>r</sup></code></td>
<td>The two-byte value of <span class=EXP>EXP1</span> is stored to where <span class=EXP>EXP2</span> points.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code><span class=EXP>EXP1</span>&rarr;{<span class=EXP>EXP2</span>}<sup>rr</sup></code></td>
<td>The big-endian two-byte value of <span class=EXP>EXP1</span> is stored to where <span class=EXP>EXP2</span> points.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr class=changedCommand>
<td>
<code>signed{<span class=EXP>EXP</span>}</code>
<span class=keyReplacement>int()</span>
</td>
<td>Returns the single byte the expression points to. It will be in the range -128 to 127.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>nib{<span class=PTR>EXP</span>}</code>
<span class=keyReplacement>iPart()</span>
</td>
<td>Returns the <span class=PTR>EXP</span>th nibble in RAM. Use this to access external data in RAM. Since there are twice as many nibbles as bytes, make sure pointers are multiplied by 2.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>nib{<span class=PTR>EXP</span>}<sup>r</sup></code>
<span class=keyReplacement>iPart()</span>
</td>
<td>Returns the <span class=PTR>EXP</span>th nibble in RAM, or ROM if compiled as an application. Use this to access internal data. Since there are twice as many nibbles as bytes, make sure pointers are multiplied by 2.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code><span class=EXP>EXP1</span>&rarr;nib{<span class=PTR>EXP2</span>}</code>
<span class=keyReplacement>iPart()</span>
</td>
<td>Writes the nibble <span class=EXP>EXP1</span> to the <span class=EXP>EXP2</span>th nibble in RAM. Since there are twice as many nibbles as bytes, make sure pointers are multiplied by 2.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
</table>
<table id=dataProcessingCommands class=commandTable>
<caption>Data Processing</caption>
<tr>
<th rowspan="2">Command</th>
<th rowspan="2">Description</th>
<th class="all" colspan="3">Size (bytes)</th>
<th class="all" rowspan="2">Speed<br/>(cycles)</th>
<td class="none" colspan="8"></td>
</tr>
<tr>
<th class="all">
<span class=info>Each Use</span>
<div class="popup"><span class=info>For commands that list special information given an argument is a constant or variable, treat the size of the argument as 0 bytes, unless otherwise stated.</span></div>
</th>
<th class="all" colspan="2">Once</th>
<td class="none" colspan="5"></td>
</tr>
<tr>
<td><code>Fill(<span class=PTR>PTR</span>,<span class=SIZE>SIZE</span>)</code></td>
<td>The byte already at <span class=PTR>PTR</span> is copied to all the bytes after it until <span class=SIZE>SIZE</span> bytes have been filled with that value. 0 is not a valid <span class=SIZE>SIZE</span>.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="5"></td>
</tr>
<tr>
<td><code>Fill(<span class=PTR>PTR</span>,<span class=SIZE>SIZE</span>,<span class=BYTE>BYTE</span>)</code></td>
<td><span class=SIZE>SIZE</span> bytes of data starting at <span class=PTR>PTR</span> are filled with a value. <span class=SIZE>SIZE</span> must be greater than 1.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="5"></td>
</tr>
<tr>
<td>
<code>Copy(<span class=BUF>BUF</span>)</code>
<span class=keyReplacement>conj()</span>
</td>
<td>Copies the 768 byte buffer to the main buffer. Same as <code>Copy(<span class=PTR>BUF</span>,<span class=VAR>L<sub>6</sub></span>,768)</code></td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="5"></td>
</tr>
<tr>
<td>
<code>Copy(<span class=BUF>BUF1</span>,<span class=BUF>BUF2</span>)</code>
<span class=keyReplacement>conj()</span>
</td>
<td>Copies the 768 byte buffer <span class=BUF>BUF1</span> to <span class=BUF>BUF2</span>. Same as <code>Copy(<span class=BUF>BUF1</span>,<span class=BUF>BUF2</span>,768)</code></td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="5"></td>
</tr>
<tr>
<td>
<code>Copy(<span class=PTR>PTR1</span>,<span class=PTR>PTR2</span>,<span class=SIZE>SIZE</span>)</code>
<span class=keyReplacement>conj()</span>
</td>
<td><span class=SIZE>SIZE</span> bytes starting from <span class=PTR>PTR1</span> are copied to <span class=PTR>PTR2</span> onwards. 0 is not a valid <span class=SIZE>SIZE</span>.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="5"></td>
</tr>
<tr>
<td>
<code>Copy(<span class=PTR>PTR1</span>,<span class=PTR>PTR2</span>,<span class=SIZE>SIZE</span>)<sup>r</sup></code>
<span class=keyReplacement>conj()</span>
</td>
<td><span class=SIZE>SIZE</span> bytes ending at <span class=PTR>PTR1</span> are copied to <span class=PTR>PTR2</span> moving backwards. 0 is not a valid <span class=SIZE>SIZE</span>.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="5"></td>
</tr>
<tr>
<td>
<code>Exch(<span class=PTR>PTR1</span>,<span class=PTR>PTR2</span>,<span class=SIZE>SIZE</span>)</code>
<span class=keyReplacement>expr()</span>
</td>
<td><span class=SIZE>SIZE</span> bytes starting from <span class=PTR>PTR1</span> are exchanged with <span class=SIZE>SIZE</span> bytes starting at <span class=PTR>PTR2</span>. 0 is not a valid <span class=SIZE>SIZE</span>.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="5"></td>
</tr>
<tr>
<td><code>length(<span class=PTR>PTR</span>)</code></td>
<td>Returns the number of bytes from the pointer to the next zero data element.</td>
<td class="all">3</td>
<td class="prgmapp" colspan="2">10</td>
<td class="fusion" colspan="2"></td>
<td class="prgmapp">
<span class=info>21*n+78</span>
<div class="popup">21*<span class=EXP>length</span> + 78</div>
</td>
<td class="fusion">
<span class=info>21*n+88</span>
<div class="popup">21*<span class=EXP>length</span> + 88</div>
</td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td>
<code>inData(<span class=BYTE>BYTE</span>,<span class=PTR>PTR</span>)</code>
<span class=keyReplacement>inString()</span>
</td>
<td>Searches for <span class=BYTE>BYTE</span> in the zero-terminated data. If found, it returns the position it was found in (starting at 1). If not found, 0 is returned. The byte 0 will never be found.</td>
<td class="all">4</td>
<td class="prgmapp" colspan="2">19</td>
<td class="fusion" colspan="2"></td>
<td class="prgmapp" colspan="2">
<span class="info">~40*n+79</span>
<div class="popup">
<span class=info>n=<span class=EXP>bytes_compared</span> includes the null terminator if it was reached</span><br/>
<br/>
<table>
<tr>
<th><span class=EXP>BYTE</span> is found</th>
<th><span class=EXP>BYTE</span> is not found</th>
</tr>
<tr>
<td class="all">40*<span class=EXP>bytes_compared</span> + 86</td>
<td class="all">40*<span class=EXP>bytes_compared</span> + 72</td>
</tr>
</table>
</div>
</td>
<td class="fusion" colspan="2">
<span class="info">~40*n+89</span>
<div class="popup">
<span class=info>n=<span class=EXP>bytes_compared</span> includes the null terminator if not found</span><br/>
<br/>
<table>
<tr>
<th><span class=EXP>BYTE</span> is found</th>
<th><span class=EXP>BYTE</span> is not found</th>
</tr>
<tr>
<td class="all">40*<span class=EXP>bytes_compared</span> + 96</td>
<td class="all">40*<span class=EXP>bytes_compared</span> + 82</td>
</tr>
</table>
</div>
</td>
</tr>
<tr class=newCommand>
<td>
<code>inData(<span class=BYTE>BYTE</span>,<span class=PTR>PTR</span>,<span class=SIZE>SIZE</span>)</code>
<span class=keyReplacement>inString()</span>
</td>
<td>Searches for <span class=BYTE>BYTE</span> in the data with the given size. If found, it returns the position it was found in (starting at 1). If not found, 0 is returned.</td>
<td class="all">5</td>
<td class="prgmapp" colspan="2">15</td>
<td class="fusion" colspan="2"></td>
<td class="prgmapp" colspan="2">
<span class="info">~21*n+96</span>
<div class="popup">
<span class=info>n=<span class=EXP>bytes_compared</span>, starting from the end going backwards</span><br/>
<br/>
<table>
<tr>
<th><span class=EXP>BYTE</span> is found</th>
<th><span class=EXP>BYTE</span> is not found</th>
</tr>
<tr>
<td class="all">21*<span class=EXP>bytes_compared</span> + 101</td>
<td class="all">21*<span class=EXP>bytes_compared</span> + 91</td>
</tr>
</table>
</div>
</td>
<td class="fusion" colspan="2">
<span class="info">~21*n+106</span>
<div class="popup">
<span class=info>n=<span class=EXP>bytes_compared</span>, starting from the end going backwards</span><br/>
<br/>
<table>
<tr>
<th><span class=EXP>BYTE</span> is found</th>
<th><span class=EXP>BYTE</span> is not found</th>
</tr>
<tr>
<td class="all">21*<span class=EXP>bytes_compared</span> + 111</td>
<td class="all">21*<span class=EXP>bytes_compared</span> + 101</td>
</tr>
</table>
</div>
</td>
</tr>
<tr class=changedCommand>
<td>
<code>strGet(<span class=PTR>PTR</span>,<span class=N>N</span>)</code>
<span class=keyReplacement>stdDev()</span>
</td>
<td>Returns the pointer to the <span class=N>N</span>th string (starting from zero) from a list of zero-terminated strings.</td>
<td class="all">4</td>
<td class="prgmapp" colspan="2">13</td>
<td class="fusion" colspan="2"></td>
<td class="prgmapp" colspan="2">
<span class="info">*</span>
<div class="popup">21*<span class=EXP>bytes_skipped</span> + 30*<span class=N>N</span> + 82</div>
</td>
<td class="fusion" colspan="2">
<span class="info">*</span>
<div class="popup">21*<span class=EXP>bytes_skipped</span> + 30*<span class=N>N</span> + 92</div>
</td>
</tr>
<tr>
<td><code>Equ&#9654;String(<span class=STR1>STR1</span>,<span class=STR2>STR2</span>)</code></td>
<td>Checks if 2 null-terminated strings are equal. Returns 0 if equal and non-zero otherwise.</td>
<td class="all">5</td>
<td class="prgmapp" colspan="2">11</td>
<td class="fusion" colspan="2"></td>
<td class="prgmapp" colspan="2">
<span class="info">~47*n+33</span>
<div class="popup">
<span class=info>n=<span class=EXP>bytes_compared</span> represents bytes compared in each string, not both combined</span><br/>
<br/>
<table>
<tr>
<th>The strings are equal</th>
<th>The strings are not equal</th>
</tr>
<tr>
<td class="all">47*<span class=EXP>bytes_compared</span> + 51</td>
<td class="all">47*<span class=EXP>bytes_compared</span> + 16</td>
</tr>
</table>
</div>
</td>
<td class="fusion" colspan="2">
<span class="info">~47*n+33</span>
<div class="popup">
<span class=info>n=<span class=EXP>bytes_compared</span> represents bytes compared in each string, not both combined</span><br/>
<br/>
<table>
<tr>
<th>The strings are equal</th>
<th>The strings are not equal</th>
</tr>
<tr>
<td class="all">47*<span class=EXP>bytes_compared</span> + 61</td>
<td class="all">47*<span class=EXP>bytes_compared</span> + 26</td>
</tr>
</table>
</div>
</td>
</tr>
<tr>
<td><code>SortD(<span class=PTR>PTR</span>,<span class=SIZE>SIZE</span>)</code></td>
<td>Sorts up to 256 bytes of data from largest to smallest starting at the pointed address.</td>
<td class="all">5</td>
<td class="prgmapp" colspan="2">24</td>
<td class="fusion" colspan="2"></td>
<td class="all" colspan="2">
<span class="info">*</span>
<div class="popup">Hell if I know</div>  
</td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td><code>cumSum(<span class=PTR>PTR</span>,<span class=SIZE>SIZE</span>)</code></td>
<td>Calculates the 2-byte checksum of some data starting at the pointer for <span class=SIZE>SIZE</span> bytes.</td>
<td class="all">4</td>
<td class="prgmapp" colspan="2">18</td>
<td class="fusion" colspan="2"></td>
<td class="prgmapp" colspan="2">
<span class="info">~45*<span class=SIZE>SIZE</span>+91</span>
<div class="popup">
45*<span class=SIZE>SIZE</span> - 1*(<span class=EXP>real_sum</span>/256) + 91<br/>
<br/>
<span class=info><span class=EXP>real_sum</span> represents the sum not clipped to 2 bytes</span>
</div>
</td>
<td class="fusion" colspan="2">
<span class="info">~45*<span class=SIZE>SIZE</span>+101</span>
<div class="popup">
45*<span class=SIZE>SIZE</span> - 1*(<span class=EXP>real_sum</span>/256) + 101<br/>
<br/>
<span class=info><span class=EXP>real_sum</span> represents the sum not clipped to 2 bytes</span>
</div>
</td>
</tr>
</table>
<table id=externalVariablesCommands class=commandTable>
<caption>External Variables</caption>
<tr>
<th rowspan="2">Command</th>
<th rowspan="2">Description</th>
<th class="all" colspan="3">Size (bytes)</th>
<th class="all" rowspan="2">Speed<br/>(cycles)</th>
<td class="none" colspan="3"></td>
</tr>
<tr>
<th class="all">
<span class=info>Each Use</span>
<div class="popup"><span class=info>For commands that list special information given an argument is a constant or variable, treat the size of the argument as 0 bytes, unless otherwise stated.</span></div>
</th>
<th class="all" colspan="2">Once</th>
</tr>
<tr>
<td><code>Ans</code></td>
<td>Returns the OS's <code>Ans</code> variable as an integer. This is unrelated to any Axe value. Throws an error if out of range.</td>
<td class="all">7</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>~10250</span>
<div class="popup">
<table>
<tr>
<th>83+</th>
<th>84+SE</th>
</tr>
<tr>
<td class="all">~10000</td>
<td class="all">~10500</td>
</tr>
</table>
</div>
</td>
</tr>
<tr>
<td><code><span class=EXP>EXP</span>&rarr;Ans</code></td>
<td>Stores the expression into the OS's <code>Ans</code> variable as an integer. This is unrelated to any Axe value.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>GetCalc(<span class=PTR>PTR</span>)</code></td>
<td>Finds the object who's name is pointed to and returns a pointer to the start of its data, or zero if it was archived or not found.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>GetCalc(<span class=PTR>PTR</span>,<span class=FILE>FILE</span>)</code></td>
<td>Attempts to create a file of the OS variable who's name is pointed to so it can be read from archive. Returns 0 if the variable was not found, and non-zero otherwise.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>GetCalc(<span class=PTR>PTR</span>,<span class=SIZE>SIZE</span>)</code></td>
<td>Creates an OS variable who's name is pointed to in RAM and makes it <span class=SIZE>SIZE</span> bytes large. Returns a pointer to the start of data, or zero if there was not enough RAM. Overwrites existing variable, even if it was in archive.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>UnArchive <span class=PTR>PTR</span></code></td>
<td>Tries to unarchive the object who's name is pointed to. Returns 1 if it could unarchive and 0 otherwise. Gives a memory error if not enough RAM.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>Archive <span class=PTR>PTR</span></code></td>
<td>Tries to archive the object who's name is pointed to. Returns 1 if it could archive and 0 otherwise. Gives a memory error if not enough Flash Memory.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>DelVar <span class=PTR>PTR</span></code></td>
<td>Deletes the OS variable who's name is pointed to even if in archive. Nothing happens if the variable does not exist.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td>
<code>float{<span class=PTR>PTR</span>}</code>
<span class=keyReplacement>fPart()</span>
</td>
<td>Converts the float at the pointed address to an integer. Floats are 9 bytes large.</td>
<td class="all">5</td>
<td class="all" colspan="2"></td>
<td class="all">
<span class=info>~2200</span>
<div class="popup">
<table>
<tr>
<th>83+</th>
<th>84+SE</th>
</tr>
<tr>
<td class="all">~2100</td>
<td class="all">~2300</td>
</tr>
</table>
</div>
</td>
</tr>
<tr>
<td>
<code><span class=EXP>EXP</span>&rarr;float{<span class=PTR>PTR</span>}</code>
<span class=keyReplacement>fPart()</span>
</td>
<td>Converts the expression into a float and then stores it at the pointed address. Floats are 9 bytes large.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
</table>
<table id=interruptsCommands class=commandTable>
<caption>Interrupts</caption>
<tr>
<th rowspan="2">Command</th>
<th rowspan="2">Description</th>
<th class="all" colspan="3">Size (bytes)</th>
<th class="all" rowspan="2">Speed<br/>(cycles)</th>
<td class="none" colspan="3"></td>
</tr>
<tr>
<th class="all">
<span class=info>Each Use</span>
<div class="popup"><span class=info>For commands that list special information given an argument is a constant or variable, treat the size of the argument as 0 bytes, unless otherwise stated.</span></div>
</th>
<th class="all" colspan="2">Once</th>
</tr>
<tr>
<td><code>fnInt(<span class=LBL>LBL</span>,<span class=FREQ>FREQ</span>)</code></td>
<td>Turns the subroutine into an interrupt and then turns interrupts on. The frequency can be (fastest) 0, 2, 4, or 6 (slowest). <span class=VAR>L<sub>2</sub></span> is used for interrupt data so do not use <span class=VAR>L<sub>2</sub></span> for storage when using interrupts.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>FnOn</code></td>
<td>Turns on interrupts.</td>
<td class="all">1</td>
<td class="all" colspan="2"></td>
<td class="all">4</td>
</tr>
<tr>
<td><code>FnOff</code></td>
<td>Turns off interrupts.</td>
<td class="all">1</td>
<td class="all" colspan="2"></td>
<td class="all">4</td>
</tr>
<tr>
<td><code>Stop</code></td>
<td>Stops execution until the next interrupt occurs. Interrupts must be on or else the calculator will freeze.</td>
<td class="all">1</td>
<td class="all" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>LnReg</code></td>
<td>Returns the calculator to regular interrupt mode.</td>
<td class="all">2</td>
<td class="all" colspan="2"></td>
<td class="all">8</td>
</tr>
<tr>
<td><code>LnReg<sup>r</sup></code></td>
<td>Returns the calculator to regular interrupt mode and repairs the damage done by setting up a custom interrupt with <code>fnInt()</code>. It is highly suggested to use this before exiting the program if using a custom interrupt.</td>
<td class="all">2</td>
<td class="all" colspan="2"></td>
<td class="all">17</td>
</tr>
</table>
<table id=linkPortCommands class=commandTable>
<caption>Link Port</caption>
<tr>
<th rowspan="2">Command</th>
<th rowspan="2">Description</th>
<th class="all" colspan="3">Size (bytes)</th>
<th class="all" rowspan="2">Speed<br/>(cycles)</th>
<td class="none" colspan="5"></td>
</tr>
<tr>
<th class="all">
<span class=info>Each Use</span>
<div class="popup"><span class=info>For commands that list special information given an argument is a constant or variable, treat the size of the argument as 0 bytes, unless otherwise stated.</span></div>
</th>
<th class="all" colspan="2">Once</th>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td>
<code>port</code>
<span class=keyReplacement>ClrTable</span>
</td>
<td>Returns the status of the link port as a number 0-3.</td>
<td class="all">7</td>
<td class="all" colspan="2"></td>
<td class="all">29</td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td>
<code><span class=EXP>EXP</span>&rarr;port</code>
<span class=keyReplacement>ClrTable</span>
</td>
<td>Sets the link port to a given status with a number 0-3. Must exit program with status 0 if changed!</td>
<td class="all">3</td>
<td class="all" colspan="2"></td>
<td class="all">15</td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td>
<code>Freq(<span class=WAVE>WAVE</span>,<span class=TIME>TIME</span>)</code>
<span class=keyReplacement>SinReg</span>
</td>
<td>Sound is played out of the link port. Wave is inversely proportional to frequency and Time must be much greater than Wave to hear anything.</td>
<td class="all">5</td>
<td class="prgmapp" colspan="2">23</td>
<td class="fusion" colspan="2"></td>
<td class="all"></td>
</tr>
<tr>
<td><code>Send(<span class=BYTE>BYTE</span>,<span class=TIME>TIME</span>)</code></td>
<td>Tries to send the byte across the linkport. It will keep trying until the other calculator receives the byte or time runs out. Returns 1 if the byte was sent successfully or 0 if it timed-out. Time is in the order of microseconds.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="2"></td>
</tr>
<tr>
<td>
<code>Get</code>
<span class=keyReplacement>Get(</span>
</td>
<td>Checks if the sender is trying to send anything. Returns the byte if it was received or -1 if nothing was sent. No waiting is done.</td>
<td class="all"></td>
<td class="all" colspan="2"></td>
<td class="all"></td>
<td class="none" colspan="2"></td>
</tr>
</table>
<table>
<tr class=newCommand><td>New or added features in this version</td></tr>
<tr class=changedCommand><td>Changed from previous version</td></tr>
<tr class=oldCommand><td>Depreciated, avoid using</td></tr>
<tr><td>No change</td></tr>
</table>
<footer>
<div>
Show size and speed for:
<input id="prgm" type="radio" name="mode"/><label for="prgm">Program</label>
<input id="app" type="radio" name="mode"/><label for="app">Application</label>
<input id="fusion" type="radio" name="mode"/><label for="fusion">Axe Fusion</label>
<input id="hide" type="radio" name="mode" checked="checked"/><label for="hide">Hide</label>
</div>
<h5>Axe Parser Commands List - Copyright &copy; 2012 Kevin Horowitz. Layout designed by Etienne Gauvin.</h5>
</footer>
<script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=73806ac11c/apps1.min.js"></script><script type="text/javascript">__CF.AJS.init1();</script></body>
</html>
